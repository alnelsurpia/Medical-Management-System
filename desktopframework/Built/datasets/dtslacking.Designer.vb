'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4927
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dtslacking"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dtslacking
    Inherits Global.System.Data.DataSet
    
    Private tabletbltrmain As tbltrmainDataTable
    
    Private tabletxtcog As txtcogDataTable
    
    Private tabletbltransslip As tbltransslipDataTable
    
    Private tabletbltrstaus As tbltrstausDataTable
    
    Private tabletblrebate As tblrebateDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tbltrmain")) Is Nothing) Then
                MyBase.Tables.Add(New tbltrmainDataTable(ds.Tables("tbltrmain")))
            End If
            If (Not (ds.Tables("txtcog")) Is Nothing) Then
                MyBase.Tables.Add(New txtcogDataTable(ds.Tables("txtcog")))
            End If
            If (Not (ds.Tables("tbltransslip")) Is Nothing) Then
                MyBase.Tables.Add(New tbltransslipDataTable(ds.Tables("tbltransslip")))
            End If
            If (Not (ds.Tables("tbltrstaus")) Is Nothing) Then
                MyBase.Tables.Add(New tbltrstausDataTable(ds.Tables("tbltrstaus")))
            End If
            If (Not (ds.Tables("tblrebate")) Is Nothing) Then
                MyBase.Tables.Add(New tblrebateDataTable(ds.Tables("tblrebate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbltrmain() As tbltrmainDataTable
        Get
            Return Me.tabletbltrmain
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property txtcog() As txtcogDataTable
        Get
            Return Me.tabletxtcog
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbltransslip() As tbltransslipDataTable
        Get
            Return Me.tabletbltransslip
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbltrstaus() As tbltrstausDataTable
        Get
            Return Me.tabletbltrstaus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblrebate() As tblrebateDataTable
        Get
            Return Me.tabletblrebate
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dtslacking = CType(MyBase.Clone,dtslacking)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tbltrmain")) Is Nothing) Then
                MyBase.Tables.Add(New tbltrmainDataTable(ds.Tables("tbltrmain")))
            End If
            If (Not (ds.Tables("txtcog")) Is Nothing) Then
                MyBase.Tables.Add(New txtcogDataTable(ds.Tables("txtcog")))
            End If
            If (Not (ds.Tables("tbltransslip")) Is Nothing) Then
                MyBase.Tables.Add(New tbltransslipDataTable(ds.Tables("tbltransslip")))
            End If
            If (Not (ds.Tables("tbltrstaus")) Is Nothing) Then
                MyBase.Tables.Add(New tbltrstausDataTable(ds.Tables("tbltrstaus")))
            End If
            If (Not (ds.Tables("tblrebate")) Is Nothing) Then
                MyBase.Tables.Add(New tblrebateDataTable(ds.Tables("tblrebate")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletbltrmain = CType(MyBase.Tables("tbltrmain"),tbltrmainDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbltrmain) Is Nothing) Then
                Me.tabletbltrmain.InitVars
            End If
        End If
        Me.tabletxtcog = CType(MyBase.Tables("txtcog"),txtcogDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletxtcog) Is Nothing) Then
                Me.tabletxtcog.InitVars
            End If
        End If
        Me.tabletbltransslip = CType(MyBase.Tables("tbltransslip"),tbltransslipDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbltransslip) Is Nothing) Then
                Me.tabletbltransslip.InitVars
            End If
        End If
        Me.tabletbltrstaus = CType(MyBase.Tables("tbltrstaus"),tbltrstausDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbltrstaus) Is Nothing) Then
                Me.tabletbltrstaus.InitVars
            End If
        End If
        Me.tabletblrebate = CType(MyBase.Tables("tblrebate"),tblrebateDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblrebate) Is Nothing) Then
                Me.tabletblrebate.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dtslacking"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dtslacking.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletbltrmain = New tbltrmainDataTable
        MyBase.Tables.Add(Me.tabletbltrmain)
        Me.tabletxtcog = New txtcogDataTable
        MyBase.Tables.Add(Me.tabletxtcog)
        Me.tabletbltransslip = New tbltransslipDataTable
        MyBase.Tables.Add(Me.tabletbltransslip)
        Me.tabletbltrstaus = New tbltrstausDataTable
        MyBase.Tables.Add(Me.tabletbltrstaus)
        Me.tabletblrebate = New tblrebateDataTable
        MyBase.Tables.Add(Me.tabletblrebate)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbltrmain() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetxtcog() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbltransslip() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbltrstaus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblrebate() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dtslacking = New dtslacking
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tbltrmainRowChangeEventHandler(ByVal sender As Object, ByVal e As tbltrmainRowChangeEvent)
    
    Public Delegate Sub txtcogRowChangeEventHandler(ByVal sender As Object, ByVal e As txtcogRowChangeEvent)
    
    Public Delegate Sub tbltransslipRowChangeEventHandler(ByVal sender As Object, ByVal e As tbltransslipRowChangeEvent)
    
    Public Delegate Sub tbltrstausRowChangeEventHandler(ByVal sender As Object, ByVal e As tbltrstausRowChangeEvent)
    
    Public Delegate Sub tblrebateRowChangeEventHandler(ByVal sender As Object, ByVal e As tblrebateRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbltrmainDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbltrmainRow)
        
        Private columntrno As Global.System.Data.DataColumn
        
        Private columnprno As Global.System.Data.DataColumn
        
        Private columnrpqno As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columndescripition As Global.System.Data.DataColumn
        
        Private columnsize As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnmanufacturer As Global.System.Data.DataColumn
        
        Private columnbrandname As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columntruedesc As Global.System.Data.DataColumn
        
        Private columnlnbn As Global.System.Data.DataColumn
        
        Private columnexpdate As Global.System.Data.DataColumn
        
        Private columndrqty As Global.System.Data.DataColumn
        
        Private columntdatetr As Global.System.Data.DataColumn
        
        Private columncname As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbltrmain"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rpqnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrpqno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripitionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property manufacturerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmanufacturer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property brandnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbrandname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property truedescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntruedesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lnbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlnbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property drqtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndrqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdatetrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdatetr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbltrmainRow
            Get
                Return CType(Me.Rows(index),tbltrmainRow)
            End Get
        End Property
        
        Public Event tbltrmainRowChanging As tbltrmainRowChangeEventHandler
        
        Public Event tbltrmainRowChanged As tbltrmainRowChangeEventHandler
        
        Public Event tbltrmainRowDeleting As tbltrmainRowChangeEventHandler
        
        Public Event tbltrmainRowDeleted As tbltrmainRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtbltrmainRow(ByVal row As tbltrmainRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtbltrmainRow( _
                    ByVal trno As String,  _
                    ByVal prno As String,  _
                    ByVal rpqno As String,  _
                    ByVal itemcode As String,  _
                    ByVal descripition As String,  _
                    ByVal size As String,  _
                    ByVal unit As String,  _
                    ByVal manufacturer As String,  _
                    ByVal brandname As String,  _
                    ByVal qty As Double,  _
                    ByVal truedesc As String,  _
                    ByVal lnbn As String,  _
                    ByVal expdate As String,  _
                    ByVal drqty As Double,  _
                    ByVal tdatetr As String,  _
                    ByVal cname As String) As tbltrmainRow
            Dim rowtbltrmainRow As tbltrmainRow = CType(Me.NewRow,tbltrmainRow)
            Dim columnValuesArray() As Object = New Object() {trno, prno, rpqno, itemcode, descripition, size, unit, manufacturer, brandname, qty, truedesc, lnbn, expdate, drqty, tdatetr, cname}
            rowtbltrmainRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbltrmainRow)
            Return rowtbltrmainRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbltrmainDataTable = CType(MyBase.Clone,tbltrmainDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbltrmainDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntrno = MyBase.Columns("trno")
            Me.columnprno = MyBase.Columns("prno")
            Me.columnrpqno = MyBase.Columns("rpqno")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columndescripition = MyBase.Columns("descripition")
            Me.columnsize = MyBase.Columns("size")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnmanufacturer = MyBase.Columns("manufacturer")
            Me.columnbrandname = MyBase.Columns("brandname")
            Me.columnqty = MyBase.Columns("qty")
            Me.columntruedesc = MyBase.Columns("truedesc")
            Me.columnlnbn = MyBase.Columns("lnbn")
            Me.columnexpdate = MyBase.Columns("expdate")
            Me.columndrqty = MyBase.Columns("drqty")
            Me.columntdatetr = MyBase.Columns("tdatetr")
            Me.columncname = MyBase.Columns("cname")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntrno = New Global.System.Data.DataColumn("trno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrno)
            Me.columnprno = New Global.System.Data.DataColumn("prno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprno)
            Me.columnrpqno = New Global.System.Data.DataColumn("rpqno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrpqno)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columndescripition = New Global.System.Data.DataColumn("descripition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripition)
            Me.columnsize = New Global.System.Data.DataColumn("size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsize)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnmanufacturer = New Global.System.Data.DataColumn("manufacturer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmanufacturer)
            Me.columnbrandname = New Global.System.Data.DataColumn("brandname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbrandname)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columntruedesc = New Global.System.Data.DataColumn("truedesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntruedesc)
            Me.columnlnbn = New Global.System.Data.DataColumn("lnbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlnbn)
            Me.columnexpdate = New Global.System.Data.DataColumn("expdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpdate)
            Me.columndrqty = New Global.System.Data.DataColumn("drqty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndrqty)
            Me.columntdatetr = New Global.System.Data.DataColumn("tdatetr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdatetr)
            Me.columncname = New Global.System.Data.DataColumn("cname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncname)
            Me.columntrno.AllowDBNull = false
            Me.columntrno.MaxLength = 45
            Me.columnprno.AllowDBNull = false
            Me.columnprno.MaxLength = 45
            Me.columnrpqno.AllowDBNull = false
            Me.columnrpqno.MaxLength = 45
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemcode.MaxLength = 45
            Me.columndescripition.AllowDBNull = false
            Me.columndescripition.MaxLength = 100
            Me.columnsize.AllowDBNull = false
            Me.columnsize.MaxLength = 45
            Me.columnunit.AllowDBNull = false
            Me.columnunit.MaxLength = 45
            Me.columnmanufacturer.AllowDBNull = false
            Me.columnmanufacturer.MaxLength = 45
            Me.columnbrandname.AllowDBNull = false
            Me.columnbrandname.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columntruedesc.AllowDBNull = false
            Me.columntruedesc.MaxLength = 100
            Me.columnlnbn.AllowDBNull = false
            Me.columnlnbn.MaxLength = 45
            Me.columnexpdate.AllowDBNull = false
            Me.columnexpdate.MaxLength = 45
            Me.columndrqty.AllowDBNull = false
            Me.columntdatetr.AllowDBNull = false
            Me.columntdatetr.MaxLength = 45
            Me.columncname.AllowDBNull = false
            Me.columncname.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtbltrmainRow() As tbltrmainRow
            Return CType(Me.NewRow,tbltrmainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbltrmainRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbltrmainRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbltrmainRowChangedEvent) Is Nothing) Then
                RaiseEvent tbltrmainRowChanged(Me, New tbltrmainRowChangeEvent(CType(e.Row,tbltrmainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbltrmainRowChangingEvent) Is Nothing) Then
                RaiseEvent tbltrmainRowChanging(Me, New tbltrmainRowChangeEvent(CType(e.Row,tbltrmainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbltrmainRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbltrmainRowDeleted(Me, New tbltrmainRowChangeEvent(CType(e.Row,tbltrmainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbltrmainRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbltrmainRowDeleting(Me, New tbltrmainRowChangeEvent(CType(e.Row,tbltrmainRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetbltrmainRow(ByVal row As tbltrmainRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtslacking = New dtslacking
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbltrmainDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class txtcogDataTable
        Inherits Global.System.Data.TypedTableBase(Of txtcogRow)
        
        Private columntrno As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        Private columnttype As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "txtcog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ttypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnttype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As txtcogRow
            Get
                Return CType(Me.Rows(index),txtcogRow)
            End Get
        End Property
        
        Public Event txtcogRowChanging As txtcogRowChangeEventHandler
        
        Public Event txtcogRowChanged As txtcogRowChangeEventHandler
        
        Public Event txtcogRowDeleting As txtcogRowChangeEventHandler
        
        Public Event txtcogRowDeleted As txtcogRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtxtcogRow(ByVal row As txtcogRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtxtcogRow(ByVal trno As String, ByVal tdate As String, ByVal description As String, ByVal amount As Double, ByVal ttype As String) As txtcogRow
            Dim rowtxtcogRow As txtcogRow = CType(Me.NewRow,txtcogRow)
            Dim columnValuesArray() As Object = New Object() {trno, tdate, description, amount, ttype}
            rowtxtcogRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtxtcogRow)
            Return rowtxtcogRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As txtcogDataTable = CType(MyBase.Clone,txtcogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New txtcogDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntrno = MyBase.Columns("trno")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columndescription = MyBase.Columns("description")
            Me.columnamount = MyBase.Columns("amount")
            Me.columnttype = MyBase.Columns("ttype")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntrno = New Global.System.Data.DataColumn("trno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrno)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
            Me.columnttype = New Global.System.Data.DataColumn("ttype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnttype)
            Me.columntrno.AllowDBNull = false
            Me.columntrno.MaxLength = 45
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 100
            Me.columnamount.AllowDBNull = false
            Me.columnttype.AllowDBNull = false
            Me.columnttype.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtxtcogRow() As txtcogRow
            Return CType(Me.NewRow,txtcogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New txtcogRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(txtcogRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.txtcogRowChangedEvent) Is Nothing) Then
                RaiseEvent txtcogRowChanged(Me, New txtcogRowChangeEvent(CType(e.Row,txtcogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.txtcogRowChangingEvent) Is Nothing) Then
                RaiseEvent txtcogRowChanging(Me, New txtcogRowChangeEvent(CType(e.Row,txtcogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.txtcogRowDeletedEvent) Is Nothing) Then
                RaiseEvent txtcogRowDeleted(Me, New txtcogRowChangeEvent(CType(e.Row,txtcogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.txtcogRowDeletingEvent) Is Nothing) Then
                RaiseEvent txtcogRowDeleting(Me, New txtcogRowChangeEvent(CType(e.Row,txtcogRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetxtcogRow(ByVal row As txtcogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtslacking = New dtslacking
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "txtcogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbltransslipDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbltransslipRow)
        
        Private columntrno As Global.System.Data.DataColumn
        
        Private columnprno As Global.System.Data.DataColumn
        
        Private columnrpqno As Global.System.Data.DataColumn
        
        Private columnprchk As Global.System.Data.DataColumn
        
        Private columnsp1 As Global.System.Data.DataColumn
        
        Private columnregprice As Global.System.Data.DataColumn
        
        Private columnrpqchk As Global.System.Data.DataColumn
        
        Private columntdatetr As Global.System.Data.DataColumn
        
        Private columntdaterpq As Global.System.Data.DataColumn
        
        Private columninvno As Global.System.Data.DataColumn
        
        Private columnpodate As Global.System.Data.DataColumn
        
        Private columnponumb As Global.System.Data.DataColumn
        
        Private columncino As Global.System.Data.DataColumn
        
        Private columncidate As Global.System.Data.DataColumn
        
        Private columndrno As Global.System.Data.DataColumn
        
        Private columndrqty As Global.System.Data.DataColumn
        
        Private columndrdate As Global.System.Data.DataColumn
        
        Private columnpochk As Global.System.Data.DataColumn
        
        Private columnpotamount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbltransslip"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rpqnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrpqno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prchkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprchk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sp1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsp1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property regpriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rpqchkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrpqchk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdatetrColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdatetr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdaterpqColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdaterpq
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property invnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property podateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpodate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ponumbColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnponumb
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cidateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncidate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property drnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property drqtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndrqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property drdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndrdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pochkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpochk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property potamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpotamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbltransslipRow
            Get
                Return CType(Me.Rows(index),tbltransslipRow)
            End Get
        End Property
        
        Public Event tbltransslipRowChanging As tbltransslipRowChangeEventHandler
        
        Public Event tbltransslipRowChanged As tbltransslipRowChangeEventHandler
        
        Public Event tbltransslipRowDeleting As tbltransslipRowChangeEventHandler
        
        Public Event tbltransslipRowDeleted As tbltransslipRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtbltransslipRow(ByVal row As tbltransslipRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtbltransslipRow( _
                    ByVal trno As String,  _
                    ByVal prno As String,  _
                    ByVal rpqno As String,  _
                    ByVal prchk As String,  _
                    ByVal sp1 As Double,  _
                    ByVal regprice As Double,  _
                    ByVal rpqchk As String,  _
                    ByVal tdatetr As String,  _
                    ByVal tdaterpq As String,  _
                    ByVal invno As String,  _
                    ByVal podate As String,  _
                    ByVal ponumb As String,  _
                    ByVal cino As String,  _
                    ByVal cidate As String,  _
                    ByVal drno As String,  _
                    ByVal drqty As Double,  _
                    ByVal drdate As String,  _
                    ByVal pochk As String,  _
                    ByVal potamount As Double) As tbltransslipRow
            Dim rowtbltransslipRow As tbltransslipRow = CType(Me.NewRow,tbltransslipRow)
            Dim columnValuesArray() As Object = New Object() {trno, prno, rpqno, prchk, sp1, regprice, rpqchk, tdatetr, tdaterpq, invno, podate, ponumb, cino, cidate, drno, drqty, drdate, pochk, potamount}
            rowtbltransslipRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbltransslipRow)
            Return rowtbltransslipRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbltransslipDataTable = CType(MyBase.Clone,tbltransslipDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbltransslipDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntrno = MyBase.Columns("trno")
            Me.columnprno = MyBase.Columns("prno")
            Me.columnrpqno = MyBase.Columns("rpqno")
            Me.columnprchk = MyBase.Columns("prchk")
            Me.columnsp1 = MyBase.Columns("sp1")
            Me.columnregprice = MyBase.Columns("regprice")
            Me.columnrpqchk = MyBase.Columns("rpqchk")
            Me.columntdatetr = MyBase.Columns("tdatetr")
            Me.columntdaterpq = MyBase.Columns("tdaterpq")
            Me.columninvno = MyBase.Columns("invno")
            Me.columnpodate = MyBase.Columns("podate")
            Me.columnponumb = MyBase.Columns("ponumb")
            Me.columncino = MyBase.Columns("cino")
            Me.columncidate = MyBase.Columns("cidate")
            Me.columndrno = MyBase.Columns("drno")
            Me.columndrqty = MyBase.Columns("drqty")
            Me.columndrdate = MyBase.Columns("drdate")
            Me.columnpochk = MyBase.Columns("pochk")
            Me.columnpotamount = MyBase.Columns("potamount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntrno = New Global.System.Data.DataColumn("trno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrno)
            Me.columnprno = New Global.System.Data.DataColumn("prno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprno)
            Me.columnrpqno = New Global.System.Data.DataColumn("rpqno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrpqno)
            Me.columnprchk = New Global.System.Data.DataColumn("prchk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprchk)
            Me.columnsp1 = New Global.System.Data.DataColumn("sp1", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsp1)
            Me.columnregprice = New Global.System.Data.DataColumn("regprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregprice)
            Me.columnrpqchk = New Global.System.Data.DataColumn("rpqchk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrpqchk)
            Me.columntdatetr = New Global.System.Data.DataColumn("tdatetr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdatetr)
            Me.columntdaterpq = New Global.System.Data.DataColumn("tdaterpq", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdaterpq)
            Me.columninvno = New Global.System.Data.DataColumn("invno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvno)
            Me.columnpodate = New Global.System.Data.DataColumn("podate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpodate)
            Me.columnponumb = New Global.System.Data.DataColumn("ponumb", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnponumb)
            Me.columncino = New Global.System.Data.DataColumn("cino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncino)
            Me.columncidate = New Global.System.Data.DataColumn("cidate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncidate)
            Me.columndrno = New Global.System.Data.DataColumn("drno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndrno)
            Me.columndrqty = New Global.System.Data.DataColumn("drqty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndrqty)
            Me.columndrdate = New Global.System.Data.DataColumn("drdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndrdate)
            Me.columnpochk = New Global.System.Data.DataColumn("pochk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpochk)
            Me.columnpotamount = New Global.System.Data.DataColumn("potamount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpotamount)
            Me.columntrno.AllowDBNull = false
            Me.columntrno.MaxLength = 45
            Me.columnprno.AllowDBNull = false
            Me.columnprno.MaxLength = 45
            Me.columnrpqno.AllowDBNull = false
            Me.columnrpqno.MaxLength = 45
            Me.columnprchk.AllowDBNull = false
            Me.columnprchk.MaxLength = 45
            Me.columnsp1.AllowDBNull = false
            Me.columnregprice.AllowDBNull = false
            Me.columnrpqchk.AllowDBNull = false
            Me.columnrpqchk.MaxLength = 45
            Me.columntdatetr.AllowDBNull = false
            Me.columntdatetr.MaxLength = 45
            Me.columntdaterpq.AllowDBNull = false
            Me.columntdaterpq.MaxLength = 45
            Me.columninvno.AllowDBNull = false
            Me.columninvno.MaxLength = 45
            Me.columnpodate.AllowDBNull = false
            Me.columnpodate.MaxLength = 45
            Me.columnponumb.AllowDBNull = false
            Me.columnponumb.MaxLength = 45
            Me.columncino.AllowDBNull = false
            Me.columncino.MaxLength = 45
            Me.columncidate.AllowDBNull = false
            Me.columncidate.MaxLength = 45
            Me.columndrno.AllowDBNull = false
            Me.columndrno.MaxLength = 45
            Me.columndrqty.AllowDBNull = false
            Me.columndrdate.AllowDBNull = false
            Me.columndrdate.MaxLength = 45
            Me.columnpochk.AllowDBNull = false
            Me.columnpochk.MaxLength = 45
            Me.columnpotamount.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtbltransslipRow() As tbltransslipRow
            Return CType(Me.NewRow,tbltransslipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbltransslipRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbltransslipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbltransslipRowChangedEvent) Is Nothing) Then
                RaiseEvent tbltransslipRowChanged(Me, New tbltransslipRowChangeEvent(CType(e.Row,tbltransslipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbltransslipRowChangingEvent) Is Nothing) Then
                RaiseEvent tbltransslipRowChanging(Me, New tbltransslipRowChangeEvent(CType(e.Row,tbltransslipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbltransslipRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbltransslipRowDeleted(Me, New tbltransslipRowChangeEvent(CType(e.Row,tbltransslipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbltransslipRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbltransslipRowDeleting(Me, New tbltransslipRowChangeEvent(CType(e.Row,tbltransslipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetbltransslipRow(ByVal row As tbltransslipRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtslacking = New dtslacking
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbltransslipDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbltrstausDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbltrstausRow)
        
        Private columnORno As Global.System.Data.DataColumn
        
        Private columnorstatus As Global.System.Data.DataColumn
        
        Private columnordate As Global.System.Data.DataColumn
        
        Private columnbankname As Global.System.Data.DataColumn
        
        Private columncheckamnt As Global.System.Data.DataColumn
        
        Private columncheckd As Global.System.Data.DataColumn
        
        Private columnchknumber As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbltrstaus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property orstatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnorstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ordateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnordate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property banknameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbankname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property checkamntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncheckamnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property checkdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncheckd
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chknumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchknumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbltrstausRow
            Get
                Return CType(Me.Rows(index),tbltrstausRow)
            End Get
        End Property
        
        Public Event tbltrstausRowChanging As tbltrstausRowChangeEventHandler
        
        Public Event tbltrstausRowChanged As tbltrstausRowChangeEventHandler
        
        Public Event tbltrstausRowDeleting As tbltrstausRowChangeEventHandler
        
        Public Event tbltrstausRowDeleted As tbltrstausRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtbltrstausRow(ByVal row As tbltrstausRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtbltrstausRow(ByVal ORno As String, ByVal orstatus As String, ByVal ordate As String, ByVal bankname As String, ByVal checkamnt As String, ByVal checkd As String, ByVal chknumber As String) As tbltrstausRow
            Dim rowtbltrstausRow As tbltrstausRow = CType(Me.NewRow,tbltrstausRow)
            Dim columnValuesArray() As Object = New Object() {ORno, orstatus, ordate, bankname, checkamnt, checkd, chknumber}
            rowtbltrstausRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbltrstausRow)
            Return rowtbltrstausRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbltrstausDataTable = CType(MyBase.Clone,tbltrstausDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbltrstausDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnORno = MyBase.Columns("ORno")
            Me.columnorstatus = MyBase.Columns("orstatus")
            Me.columnordate = MyBase.Columns("ordate")
            Me.columnbankname = MyBase.Columns("bankname")
            Me.columncheckamnt = MyBase.Columns("checkamnt")
            Me.columncheckd = MyBase.Columns("checkd")
            Me.columnchknumber = MyBase.Columns("chknumber")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnORno = New Global.System.Data.DataColumn("ORno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORno)
            Me.columnorstatus = New Global.System.Data.DataColumn("orstatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnorstatus)
            Me.columnordate = New Global.System.Data.DataColumn("ordate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnordate)
            Me.columnbankname = New Global.System.Data.DataColumn("bankname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbankname)
            Me.columncheckamnt = New Global.System.Data.DataColumn("checkamnt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncheckamnt)
            Me.columncheckd = New Global.System.Data.DataColumn("checkd", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncheckd)
            Me.columnchknumber = New Global.System.Data.DataColumn("chknumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchknumber)
            Me.columnORno.AllowDBNull = false
            Me.columnORno.MaxLength = 45
            Me.columnorstatus.AllowDBNull = false
            Me.columnorstatus.MaxLength = 45
            Me.columnordate.AllowDBNull = false
            Me.columnordate.MaxLength = 45
            Me.columnbankname.AllowDBNull = false
            Me.columnbankname.MaxLength = 100
            Me.columncheckamnt.AllowDBNull = false
            Me.columncheckamnt.MaxLength = 45
            Me.columncheckd.AllowDBNull = false
            Me.columncheckd.MaxLength = 45
            Me.columnchknumber.AllowDBNull = false
            Me.columnchknumber.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtbltrstausRow() As tbltrstausRow
            Return CType(Me.NewRow,tbltrstausRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbltrstausRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbltrstausRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbltrstausRowChangedEvent) Is Nothing) Then
                RaiseEvent tbltrstausRowChanged(Me, New tbltrstausRowChangeEvent(CType(e.Row,tbltrstausRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbltrstausRowChangingEvent) Is Nothing) Then
                RaiseEvent tbltrstausRowChanging(Me, New tbltrstausRowChangeEvent(CType(e.Row,tbltrstausRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbltrstausRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbltrstausRowDeleted(Me, New tbltrstausRowChangeEvent(CType(e.Row,tbltrstausRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbltrstausRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbltrstausRowDeleting(Me, New tbltrstausRowChangeEvent(CType(e.Row,tbltrstausRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetbltrstausRow(ByVal row As tbltrstausRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtslacking = New dtslacking
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbltrstausDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblrebateDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblrebateRow)
        
        Private columntrno As Global.System.Data.DataColumn
        
        Private columngrossamtof_C As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columnpono As Global.System.Data.DataColumn
        
        Private columnpodate As Global.System.Data.DataColumn
        
        Private columnchkno As Global.System.Data.DataColumn
        
        Private columnchkdate As Global.System.Data.DataColumn
        
        Private columnamntofchk As Global.System.Data.DataColumn
        
        Private columnrecepient As Global.System.Data.DataColumn
        
        Private columnsuppleir As Global.System.Data.DataColumn
        
        Private columnclassification As Global.System.Data.DataColumn
        
        Private columngross As Global.System.Data.DataColumn
        
        Private columnappliedR As Global.System.Data.DataColumn
        
        Private columnRamount As Global.System.Data.DataColumn
        
        Private columnrebateamnt As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblrebate"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property grossamtof_CColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngrossamtof_C
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ponoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property podateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpodate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chknoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chkdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amntofchkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamntofchk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property recepientColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrecepient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suppleirColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuppleir
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property classificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclassification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property grossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columngross
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appliedRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappliedR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RamountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rebateamntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrebateamnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblrebateRow
            Get
                Return CType(Me.Rows(index),tblrebateRow)
            End Get
        End Property
        
        Public Event tblrebateRowChanging As tblrebateRowChangeEventHandler
        
        Public Event tblrebateRowChanged As tblrebateRowChangeEventHandler
        
        Public Event tblrebateRowDeleting As tblrebateRowChangeEventHandler
        
        Public Event tblrebateRowDeleted As tblrebateRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblrebateRow(ByVal row As tblrebateRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblrebateRow(ByVal trno As String, ByVal grossamtof_C As Double, ByVal tdate As String, ByVal pono As String, ByVal podate As String, ByVal chkno As String, ByVal chkdate As String, ByVal amntofchk As Double, ByVal recepient As String, ByVal suppleir As String, ByVal classification As String, ByVal gross As Double, ByVal appliedR As Double, ByVal Ramount As String, ByVal rebateamnt As Double) As tblrebateRow
            Dim rowtblrebateRow As tblrebateRow = CType(Me.NewRow,tblrebateRow)
            Dim columnValuesArray() As Object = New Object() {trno, grossamtof_C, tdate, pono, podate, chkno, chkdate, amntofchk, recepient, suppleir, classification, gross, appliedR, Ramount, rebateamnt}
            rowtblrebateRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblrebateRow)
            Return rowtblrebateRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblrebateDataTable = CType(MyBase.Clone,tblrebateDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblrebateDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntrno = MyBase.Columns("trno")
            Me.columngrossamtof_C = MyBase.Columns("grossamtof_C")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columnpono = MyBase.Columns("pono")
            Me.columnpodate = MyBase.Columns("podate")
            Me.columnchkno = MyBase.Columns("chkno")
            Me.columnchkdate = MyBase.Columns("chkdate")
            Me.columnamntofchk = MyBase.Columns("amntofchk")
            Me.columnrecepient = MyBase.Columns("recepient")
            Me.columnsuppleir = MyBase.Columns("suppleir")
            Me.columnclassification = MyBase.Columns("classification")
            Me.columngross = MyBase.Columns("gross")
            Me.columnappliedR = MyBase.Columns("appliedR")
            Me.columnRamount = MyBase.Columns("Ramount")
            Me.columnrebateamnt = MyBase.Columns("rebateamnt")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntrno = New Global.System.Data.DataColumn("trno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrno)
            Me.columngrossamtof_C = New Global.System.Data.DataColumn("grossamtof_C", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngrossamtof_C)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columnpono = New Global.System.Data.DataColumn("pono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpono)
            Me.columnpodate = New Global.System.Data.DataColumn("podate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpodate)
            Me.columnchkno = New Global.System.Data.DataColumn("chkno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkno)
            Me.columnchkdate = New Global.System.Data.DataColumn("chkdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkdate)
            Me.columnamntofchk = New Global.System.Data.DataColumn("amntofchk", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamntofchk)
            Me.columnrecepient = New Global.System.Data.DataColumn("recepient", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrecepient)
            Me.columnsuppleir = New Global.System.Data.DataColumn("suppleir", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuppleir)
            Me.columnclassification = New Global.System.Data.DataColumn("classification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclassification)
            Me.columngross = New Global.System.Data.DataColumn("gross", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columngross)
            Me.columnappliedR = New Global.System.Data.DataColumn("appliedR", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappliedR)
            Me.columnRamount = New Global.System.Data.DataColumn("Ramount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRamount)
            Me.columnrebateamnt = New Global.System.Data.DataColumn("rebateamnt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrebateamnt)
            Me.columntrno.AllowDBNull = false
            Me.columntrno.MaxLength = 45
            Me.columngrossamtof_C.AllowDBNull = false
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columnpono.AllowDBNull = false
            Me.columnpono.MaxLength = 45
            Me.columnpodate.AllowDBNull = false
            Me.columnpodate.MaxLength = 45
            Me.columnchkno.AllowDBNull = false
            Me.columnchkno.MaxLength = 45
            Me.columnchkdate.AllowDBNull = false
            Me.columnchkdate.MaxLength = 45
            Me.columnamntofchk.AllowDBNull = false
            Me.columnrecepient.AllowDBNull = false
            Me.columnrecepient.MaxLength = 45
            Me.columnsuppleir.AllowDBNull = false
            Me.columnsuppleir.MaxLength = 45
            Me.columnclassification.AllowDBNull = false
            Me.columnclassification.MaxLength = 45
            Me.columngross.AllowDBNull = false
            Me.columnappliedR.AllowDBNull = false
            Me.columnRamount.AllowDBNull = false
            Me.columnRamount.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblrebateRow() As tblrebateRow
            Return CType(Me.NewRow,tblrebateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblrebateRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblrebateRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblrebateRowChangedEvent) Is Nothing) Then
                RaiseEvent tblrebateRowChanged(Me, New tblrebateRowChangeEvent(CType(e.Row,tblrebateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblrebateRowChangingEvent) Is Nothing) Then
                RaiseEvent tblrebateRowChanging(Me, New tblrebateRowChangeEvent(CType(e.Row,tblrebateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblrebateRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblrebateRowDeleted(Me, New tblrebateRowChangeEvent(CType(e.Row,tblrebateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblrebateRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblrebateRowDeleting(Me, New tblrebateRowChangeEvent(CType(e.Row,tblrebateRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblrebateRow(ByVal row As tblrebateRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dtslacking = New dtslacking
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblrebateDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tbltrmainRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbltrmain As tbltrmainDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbltrmain = CType(Me.Table,tbltrmainDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trno() As String
            Get
                Return CType(Me(Me.tabletbltrmain.trnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.trnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prno() As String
            Get
                Return CType(Me(Me.tabletbltrmain.prnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.prnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rpqno() As String
            Get
                Return CType(Me(Me.tabletbltrmain.rpqnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.rpqnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Return CType(Me(Me.tabletbltrmain.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripition() As String
            Get
                Return CType(Me(Me.tabletbltrmain.descripitionColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.descripitionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property size() As String
            Get
                Return CType(Me(Me.tabletbltrmain.sizeColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.sizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Return CType(Me(Me.tabletbltrmain.unitColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property manufacturer() As String
            Get
                Return CType(Me(Me.tabletbltrmain.manufacturerColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.manufacturerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property brandname() As String
            Get
                Return CType(Me(Me.tabletbltrmain.brandnameColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.brandnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Double
            Get
                Return CType(Me(Me.tabletbltrmain.qtyColumn),Double)
            End Get
            Set
                Me(Me.tabletbltrmain.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property truedesc() As String
            Get
                Return CType(Me(Me.tabletbltrmain.truedescColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.truedescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lnbn() As String
            Get
                Return CType(Me(Me.tabletbltrmain.lnbnColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.lnbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expdate() As String
            Get
                Return CType(Me(Me.tabletbltrmain.expdateColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.expdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property drqty() As Double
            Get
                Return CType(Me(Me.tabletbltrmain.drqtyColumn),Double)
            End Get
            Set
                Me(Me.tabletbltrmain.drqtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdatetr() As String
            Get
                Return CType(Me(Me.tabletbltrmain.tdatetrColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.tdatetrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cname() As String
            Get
                Return CType(Me(Me.tabletbltrmain.cnameColumn),String)
            End Get
            Set
                Me(Me.tabletbltrmain.cnameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class txtcogRow
        Inherits Global.System.Data.DataRow
        
        Private tabletxtcog As txtcogDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletxtcog = CType(Me.Table,txtcogDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trno() As String
            Get
                Return CType(Me(Me.tabletxtcog.trnoColumn),String)
            End Get
            Set
                Me(Me.tabletxtcog.trnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletxtcog.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletxtcog.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tabletxtcog.descriptionColumn),String)
            End Get
            Set
                Me(Me.tabletxtcog.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Double
            Get
                Return CType(Me(Me.tabletxtcog.amountColumn),Double)
            End Get
            Set
                Me(Me.tabletxtcog.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ttype() As String
            Get
                Return CType(Me(Me.tabletxtcog.ttypeColumn),String)
            End Get
            Set
                Me(Me.tabletxtcog.ttypeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tbltransslipRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbltransslip As tbltransslipDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbltransslip = CType(Me.Table,tbltransslipDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trno() As String
            Get
                Return CType(Me(Me.tabletbltransslip.trnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.trnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prno() As String
            Get
                Return CType(Me(Me.tabletbltransslip.prnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.prnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rpqno() As String
            Get
                Return CType(Me(Me.tabletbltransslip.rpqnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.rpqnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prchk() As String
            Get
                Return CType(Me(Me.tabletbltransslip.prchkColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.prchkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sp1() As Double
            Get
                Return CType(Me(Me.tabletbltransslip.sp1Column),Double)
            End Get
            Set
                Me(Me.tabletbltransslip.sp1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property regprice() As Double
            Get
                Return CType(Me(Me.tabletbltransslip.regpriceColumn),Double)
            End Get
            Set
                Me(Me.tabletbltransslip.regpriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rpqchk() As String
            Get
                Return CType(Me(Me.tabletbltransslip.rpqchkColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.rpqchkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdatetr() As String
            Get
                Return CType(Me(Me.tabletbltransslip.tdatetrColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.tdatetrColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdaterpq() As String
            Get
                Return CType(Me(Me.tabletbltransslip.tdaterpqColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.tdaterpqColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property invno() As String
            Get
                Return CType(Me(Me.tabletbltransslip.invnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.invnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property podate() As String
            Get
                Return CType(Me(Me.tabletbltransslip.podateColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.podateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ponumb() As String
            Get
                Return CType(Me(Me.tabletbltransslip.ponumbColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.ponumbColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cino() As String
            Get
                Return CType(Me(Me.tabletbltransslip.cinoColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.cinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cidate() As String
            Get
                Return CType(Me(Me.tabletbltransslip.cidateColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.cidateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property drno() As String
            Get
                Return CType(Me(Me.tabletbltransslip.drnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.drnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property drqty() As Double
            Get
                Return CType(Me(Me.tabletbltransslip.drqtyColumn),Double)
            End Get
            Set
                Me(Me.tabletbltransslip.drqtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property drdate() As String
            Get
                Return CType(Me(Me.tabletbltransslip.drdateColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.drdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pochk() As String
            Get
                Return CType(Me(Me.tabletbltransslip.pochkColumn),String)
            End Get
            Set
                Me(Me.tabletbltransslip.pochkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property potamount() As Double
            Get
                Return CType(Me(Me.tabletbltransslip.potamountColumn),Double)
            End Get
            Set
                Me(Me.tabletbltransslip.potamountColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tbltrstausRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbltrstaus As tbltrstausDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbltrstaus = CType(Me.Table,tbltrstausDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORno() As String
            Get
                Return CType(Me(Me.tabletbltrstaus.ORnoColumn),String)
            End Get
            Set
                Me(Me.tabletbltrstaus.ORnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property orstatus() As String
            Get
                Return CType(Me(Me.tabletbltrstaus.orstatusColumn),String)
            End Get
            Set
                Me(Me.tabletbltrstaus.orstatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ordate() As String
            Get
                Return CType(Me(Me.tabletbltrstaus.ordateColumn),String)
            End Get
            Set
                Me(Me.tabletbltrstaus.ordateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property bankname() As String
            Get
                Return CType(Me(Me.tabletbltrstaus.banknameColumn),String)
            End Get
            Set
                Me(Me.tabletbltrstaus.banknameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property checkamnt() As String
            Get
                Return CType(Me(Me.tabletbltrstaus.checkamntColumn),String)
            End Get
            Set
                Me(Me.tabletbltrstaus.checkamntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property checkd() As String
            Get
                Return CType(Me(Me.tabletbltrstaus.checkdColumn),String)
            End Get
            Set
                Me(Me.tabletbltrstaus.checkdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chknumber() As String
            Get
                Return CType(Me(Me.tabletbltrstaus.chknumberColumn),String)
            End Get
            Set
                Me(Me.tabletbltrstaus.chknumberColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblrebateRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblrebate As tblrebateDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblrebate = CType(Me.Table,tblrebateDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trno() As String
            Get
                Return CType(Me(Me.tabletblrebate.trnoColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.trnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property grossamtof_C() As Double
            Get
                Return CType(Me(Me.tabletblrebate.grossamtof_CColumn),Double)
            End Get
            Set
                Me(Me.tabletblrebate.grossamtof_CColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletblrebate.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pono() As String
            Get
                Return CType(Me(Me.tabletblrebate.ponoColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.ponoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property podate() As String
            Get
                Return CType(Me(Me.tabletblrebate.podateColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.podateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chkno() As String
            Get
                Return CType(Me(Me.tabletblrebate.chknoColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.chknoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chkdate() As String
            Get
                Return CType(Me(Me.tabletblrebate.chkdateColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.chkdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amntofchk() As Double
            Get
                Return CType(Me(Me.tabletblrebate.amntofchkColumn),Double)
            End Get
            Set
                Me(Me.tabletblrebate.amntofchkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property recepient() As String
            Get
                Return CType(Me(Me.tabletblrebate.recepientColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.recepientColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suppleir() As String
            Get
                Return CType(Me(Me.tabletblrebate.suppleirColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.suppleirColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property classification() As String
            Get
                Return CType(Me(Me.tabletblrebate.classificationColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.classificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property gross() As Double
            Get
                Return CType(Me(Me.tabletblrebate.grossColumn),Double)
            End Get
            Set
                Me(Me.tabletblrebate.grossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appliedR() As Double
            Get
                Return CType(Me(Me.tabletblrebate.appliedRColumn),Double)
            End Get
            Set
                Me(Me.tabletblrebate.appliedRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ramount() As String
            Get
                Return CType(Me(Me.tabletblrebate.RamountColumn),String)
            End Get
            Set
                Me(Me.tabletblrebate.RamountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rebateamnt() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblrebate.rebateamntColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'rebateamnt' in table 'tblrebate' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblrebate.rebateamntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrebateamntNull() As Boolean
            Return Me.IsNull(Me.tabletblrebate.rebateamntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrebateamntNull()
            Me(Me.tabletblrebate.rebateamntColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tbltrmainRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbltrmainRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tbltrmainRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tbltrmainRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class txtcogRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As txtcogRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As txtcogRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As txtcogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tbltransslipRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbltransslipRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tbltransslipRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tbltransslipRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tbltrstausRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbltrstausRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tbltrstausRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tbltrstausRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblrebateRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblrebateRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblrebateRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblrebateRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dtslackingTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbltrmainTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbltrmain"
            tableMapping.ColumnMappings.Add("trno", "trno")
            tableMapping.ColumnMappings.Add("prno", "prno")
            tableMapping.ColumnMappings.Add("rpqno", "rpqno")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("descripition", "descripition")
            tableMapping.ColumnMappings.Add("size", "size")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("manufacturer", "manufacturer")
            tableMapping.ColumnMappings.Add("brandname", "brandname")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("truedesc", "truedesc")
            tableMapping.ColumnMappings.Add("lnbn", "lnbn")
            tableMapping.ColumnMappings.Add("expdate", "expdate")
            tableMapping.ColumnMappings.Add("drqty", "drqty")
            tableMapping.ColumnMappings.Add("tdatetr", "tdatetr")
            tableMapping.ColumnMappings.Add("cname", "cname")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        trno, prno, rpqno, itemcode, descripition, size, unit, manufacturer"& _ 
                ", brandname, qty, truedesc, lnbn, expdate, drqty, tdatetr, cname"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          "& _ 
                "  tbltrmain"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (STR_TO_DATE(tdatetr, '%m/%d/%Y') BETWEEN STR_TO_DATE("& _ 
                "@strDateFrom, '%m/%d/%Y') AND STR_TO_DATE(@strDateTo, '%m/%d/%Y')) AND (qty - dr"& _ 
                "qty > 0)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateFrom"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateTo"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtslacking.tbltrmainDataTable, ByVal strDateFrom As String, ByVal strDateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal strDateFrom As String, ByVal strDateTo As String) As dtslacking.tbltrmainDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateTo,String)
            End If
            Dim dataTable As dtslacking.tbltrmainDataTable = New dtslacking.tbltrmainDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class txtcogTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "txtcog"
            tableMapping.ColumnMappings.Add("trno", "trno")
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("amount", "amount")
            tableMapping.ColumnMappings.Add("ttype", "ttype")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        trno, tdate, description, amount, ttype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            txtcog"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"wh"& _ 
                "ere trno = @trno"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@trno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "trno"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtslacking.txtcogDataTable, ByVal trno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal trno As String) As dtslacking.txtcogDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            Dim dataTable As dtslacking.txtcogDataTable = New dtslacking.txtcogDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbltransslipTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbltransslip"
            tableMapping.ColumnMappings.Add("trno", "trno")
            tableMapping.ColumnMappings.Add("prno", "prno")
            tableMapping.ColumnMappings.Add("rpqno", "rpqno")
            tableMapping.ColumnMappings.Add("prchk", "prchk")
            tableMapping.ColumnMappings.Add("sp1", "sp1")
            tableMapping.ColumnMappings.Add("regprice", "regprice")
            tableMapping.ColumnMappings.Add("rpqchk", "rpqchk")
            tableMapping.ColumnMappings.Add("tdatetr", "tdatetr")
            tableMapping.ColumnMappings.Add("tdaterpq", "tdaterpq")
            tableMapping.ColumnMappings.Add("invno", "invno")
            tableMapping.ColumnMappings.Add("podate", "podate")
            tableMapping.ColumnMappings.Add("ponumb", "ponumb")
            tableMapping.ColumnMappings.Add("cino", "cino")
            tableMapping.ColumnMappings.Add("cidate", "cidate")
            tableMapping.ColumnMappings.Add("drno", "drno")
            tableMapping.ColumnMappings.Add("drqty", "drqty")
            tableMapping.ColumnMappings.Add("drdate", "drdate")
            tableMapping.ColumnMappings.Add("pochk", "pochk")
            tableMapping.ColumnMappings.Add("potamount", "potamount")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        trno, prno, rpqno, prchk, sp1, regprice, rpqchk, tdatetr, tdaterpq,"& _ 
                " invno, podate, ponumb, cino, cidate, drno, drqty, drdate, pochk, potamount"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M            tbltrmain"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where trno = @trno"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@trno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "trno"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtslacking.tbltransslipDataTable, ByVal trno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal trno As String) As dtslacking.tbltransslipDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            Dim dataTable As dtslacking.tbltransslipDataTable = New dtslacking.tbltransslipDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbltrstausTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbltrstaus"
            tableMapping.ColumnMappings.Add("ORno", "ORno")
            tableMapping.ColumnMappings.Add("orstatus", "orstatus")
            tableMapping.ColumnMappings.Add("ordate", "ordate")
            tableMapping.ColumnMappings.Add("bankname", "bankname")
            tableMapping.ColumnMappings.Add("checkamnt", "checkamnt")
            tableMapping.ColumnMappings.Add("checkd", "checkd")
            tableMapping.ColumnMappings.Add("chknumber", "chknumber")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ORno, orstatus, ordate, bankname, checkamnt, checkd, chknumber"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M            tbltrstaus"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (trno = @trno)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@trno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "trno"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtslacking.tbltrstausDataTable, ByVal trno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal trno As String) As dtslacking.tbltrstausDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            Dim dataTable As dtslacking.tbltrstausDataTable = New dtslacking.tbltrstausDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblrebateTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblrebate"
            tableMapping.ColumnMappings.Add("trno", "trno")
            tableMapping.ColumnMappings.Add("grossamtof_C", "grossamtof_C")
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("pono", "pono")
            tableMapping.ColumnMappings.Add("podate", "podate")
            tableMapping.ColumnMappings.Add("chkno", "chkno")
            tableMapping.ColumnMappings.Add("chkdate", "chkdate")
            tableMapping.ColumnMappings.Add("amntofchk", "amntofchk")
            tableMapping.ColumnMappings.Add("recepient", "recepient")
            tableMapping.ColumnMappings.Add("suppleir", "suppleir")
            tableMapping.ColumnMappings.Add("classification", "classification")
            tableMapping.ColumnMappings.Add("gross", "gross")
            tableMapping.ColumnMappings.Add("appliedR", "appliedR")
            tableMapping.ColumnMappings.Add("Ramount", "Ramount")
            tableMapping.ColumnMappings.Add("rebateamnt", "rebateamnt")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        trno, grossamtof_C, tdate, pono, podate, chkno, chkdate, amntofchk,"& _ 
                " recepient, suppleir, classification, gross, appliedR, Ramount, sum(rebateamnt) "& _ 
                "as rebateamnt"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tblrebate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (trno = @trno) group by t"& _ 
                "rno"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@trno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "trno"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dtslacking.tblrebateDataTable, ByVal trno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal trno As String) As dtslacking.tblrebateDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            Dim dataTable As dtslacking.tblrebateDataTable = New dtslacking.tblrebateDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As dtslacking, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As dtslacking, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As dtslacking, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As dtslacking) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
