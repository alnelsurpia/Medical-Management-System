'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4952
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSet1"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSet1
    Inherits Global.System.Data.DataSet
    
    Private tabletblrecieved As tblrecievedDataTable
    
    Private tabletbldelievery As tbldelieveryDataTable
    
    Private tabletblpurchase As tblpurchaseDataTable
    
    Private tableCollection As CollectionDataTable
    
    Private tabletblrecievables As tblrecievablesDataTable
    
    Private tabletblstatement As tblstatementDataTable
    
    Private tabletblcollected As tblcollectedDataTable
    
    Private tabletblallstatement As tblallstatementDataTable
    
    Private tabletblimages As tblimagesDataTable
    
    Private tabletbldrreport As tbldrreportDataTable
    
    Private tabletblchargenew As tblchargenewDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tblrecieved")) Is Nothing) Then
                MyBase.Tables.Add(New tblrecievedDataTable(ds.Tables("tblrecieved")))
            End If
            If (Not (ds.Tables("tbldelievery")) Is Nothing) Then
                MyBase.Tables.Add(New tbldelieveryDataTable(ds.Tables("tbldelievery")))
            End If
            If (Not (ds.Tables("tblpurchase")) Is Nothing) Then
                MyBase.Tables.Add(New tblpurchaseDataTable(ds.Tables("tblpurchase")))
            End If
            If (Not (ds.Tables("Collection")) Is Nothing) Then
                MyBase.Tables.Add(New CollectionDataTable(ds.Tables("Collection")))
            End If
            If (Not (ds.Tables("tblrecievables")) Is Nothing) Then
                MyBase.Tables.Add(New tblrecievablesDataTable(ds.Tables("tblrecievables")))
            End If
            If (Not (ds.Tables("tblstatement")) Is Nothing) Then
                MyBase.Tables.Add(New tblstatementDataTable(ds.Tables("tblstatement")))
            End If
            If (Not (ds.Tables("tblcollected")) Is Nothing) Then
                MyBase.Tables.Add(New tblcollectedDataTable(ds.Tables("tblcollected")))
            End If
            If (Not (ds.Tables("tblallstatement")) Is Nothing) Then
                MyBase.Tables.Add(New tblallstatementDataTable(ds.Tables("tblallstatement")))
            End If
            If (Not (ds.Tables("tblimages")) Is Nothing) Then
                MyBase.Tables.Add(New tblimagesDataTable(ds.Tables("tblimages")))
            End If
            If (Not (ds.Tables("tbldrreport")) Is Nothing) Then
                MyBase.Tables.Add(New tbldrreportDataTable(ds.Tables("tbldrreport")))
            End If
            If (Not (ds.Tables("tblchargenew")) Is Nothing) Then
                MyBase.Tables.Add(New tblchargenewDataTable(ds.Tables("tblchargenew")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblrecieved() As tblrecievedDataTable
        Get
            Return Me.tabletblrecieved
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbldelievery() As tbldelieveryDataTable
        Get
            Return Me.tabletbldelievery
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblpurchase() As tblpurchaseDataTable
        Get
            Return Me.tabletblpurchase
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Collection() As CollectionDataTable
        Get
            Return Me.tableCollection
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblrecievables() As tblrecievablesDataTable
        Get
            Return Me.tabletblrecievables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblstatement() As tblstatementDataTable
        Get
            Return Me.tabletblstatement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblcollected() As tblcollectedDataTable
        Get
            Return Me.tabletblcollected
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblallstatement() As tblallstatementDataTable
        Get
            Return Me.tabletblallstatement
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblimages() As tblimagesDataTable
        Get
            Return Me.tabletblimages
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tbldrreport() As tbldrreportDataTable
        Get
            Return Me.tabletbldrreport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tblchargenew() As tblchargenewDataTable
        Get
            Return Me.tabletblchargenew
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("tblrecieved")) Is Nothing) Then
                MyBase.Tables.Add(New tblrecievedDataTable(ds.Tables("tblrecieved")))
            End If
            If (Not (ds.Tables("tbldelievery")) Is Nothing) Then
                MyBase.Tables.Add(New tbldelieveryDataTable(ds.Tables("tbldelievery")))
            End If
            If (Not (ds.Tables("tblpurchase")) Is Nothing) Then
                MyBase.Tables.Add(New tblpurchaseDataTable(ds.Tables("tblpurchase")))
            End If
            If (Not (ds.Tables("Collection")) Is Nothing) Then
                MyBase.Tables.Add(New CollectionDataTable(ds.Tables("Collection")))
            End If
            If (Not (ds.Tables("tblrecievables")) Is Nothing) Then
                MyBase.Tables.Add(New tblrecievablesDataTable(ds.Tables("tblrecievables")))
            End If
            If (Not (ds.Tables("tblstatement")) Is Nothing) Then
                MyBase.Tables.Add(New tblstatementDataTable(ds.Tables("tblstatement")))
            End If
            If (Not (ds.Tables("tblcollected")) Is Nothing) Then
                MyBase.Tables.Add(New tblcollectedDataTable(ds.Tables("tblcollected")))
            End If
            If (Not (ds.Tables("tblallstatement")) Is Nothing) Then
                MyBase.Tables.Add(New tblallstatementDataTable(ds.Tables("tblallstatement")))
            End If
            If (Not (ds.Tables("tblimages")) Is Nothing) Then
                MyBase.Tables.Add(New tblimagesDataTable(ds.Tables("tblimages")))
            End If
            If (Not (ds.Tables("tbldrreport")) Is Nothing) Then
                MyBase.Tables.Add(New tbldrreportDataTable(ds.Tables("tbldrreport")))
            End If
            If (Not (ds.Tables("tblchargenew")) Is Nothing) Then
                MyBase.Tables.Add(New tblchargenewDataTable(ds.Tables("tblchargenew")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletblrecieved = CType(MyBase.Tables("tblrecieved"),tblrecievedDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblrecieved) Is Nothing) Then
                Me.tabletblrecieved.InitVars
            End If
        End If
        Me.tabletbldelievery = CType(MyBase.Tables("tbldelievery"),tbldelieveryDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbldelievery) Is Nothing) Then
                Me.tabletbldelievery.InitVars
            End If
        End If
        Me.tabletblpurchase = CType(MyBase.Tables("tblpurchase"),tblpurchaseDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblpurchase) Is Nothing) Then
                Me.tabletblpurchase.InitVars
            End If
        End If
        Me.tableCollection = CType(MyBase.Tables("Collection"),CollectionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCollection) Is Nothing) Then
                Me.tableCollection.InitVars
            End If
        End If
        Me.tabletblrecievables = CType(MyBase.Tables("tblrecievables"),tblrecievablesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblrecievables) Is Nothing) Then
                Me.tabletblrecievables.InitVars
            End If
        End If
        Me.tabletblstatement = CType(MyBase.Tables("tblstatement"),tblstatementDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblstatement) Is Nothing) Then
                Me.tabletblstatement.InitVars
            End If
        End If
        Me.tabletblcollected = CType(MyBase.Tables("tblcollected"),tblcollectedDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblcollected) Is Nothing) Then
                Me.tabletblcollected.InitVars
            End If
        End If
        Me.tabletblallstatement = CType(MyBase.Tables("tblallstatement"),tblallstatementDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblallstatement) Is Nothing) Then
                Me.tabletblallstatement.InitVars
            End If
        End If
        Me.tabletblimages = CType(MyBase.Tables("tblimages"),tblimagesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblimages) Is Nothing) Then
                Me.tabletblimages.InitVars
            End If
        End If
        Me.tabletbldrreport = CType(MyBase.Tables("tbldrreport"),tbldrreportDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletbldrreport) Is Nothing) Then
                Me.tabletbldrreport.InitVars
            End If
        End If
        Me.tabletblchargenew = CType(MyBase.Tables("tblchargenew"),tblchargenewDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletblchargenew) Is Nothing) Then
                Me.tabletblchargenew.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSet1.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletblrecieved = New tblrecievedDataTable
        MyBase.Tables.Add(Me.tabletblrecieved)
        Me.tabletbldelievery = New tbldelieveryDataTable
        MyBase.Tables.Add(Me.tabletbldelievery)
        Me.tabletblpurchase = New tblpurchaseDataTable
        MyBase.Tables.Add(Me.tabletblpurchase)
        Me.tableCollection = New CollectionDataTable
        MyBase.Tables.Add(Me.tableCollection)
        Me.tabletblrecievables = New tblrecievablesDataTable
        MyBase.Tables.Add(Me.tabletblrecievables)
        Me.tabletblstatement = New tblstatementDataTable
        MyBase.Tables.Add(Me.tabletblstatement)
        Me.tabletblcollected = New tblcollectedDataTable
        MyBase.Tables.Add(Me.tabletblcollected)
        Me.tabletblallstatement = New tblallstatementDataTable
        MyBase.Tables.Add(Me.tabletblallstatement)
        Me.tabletblimages = New tblimagesDataTable
        MyBase.Tables.Add(Me.tabletblimages)
        Me.tabletbldrreport = New tbldrreportDataTable
        MyBase.Tables.Add(Me.tabletbldrreport)
        Me.tabletblchargenew = New tblchargenewDataTable
        MyBase.Tables.Add(Me.tabletblchargenew)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblrecieved() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbldelievery() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblpurchase() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCollection() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblrecievables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblstatement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblcollected() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblallstatement() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblimages() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetbldrreport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializetblchargenew() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub tblrecievedRowChangeEventHandler(ByVal sender As Object, ByVal e As tblrecievedRowChangeEvent)
    
    Public Delegate Sub tbldelieveryRowChangeEventHandler(ByVal sender As Object, ByVal e As tbldelieveryRowChangeEvent)
    
    Public Delegate Sub tblpurchaseRowChangeEventHandler(ByVal sender As Object, ByVal e As tblpurchaseRowChangeEvent)
    
    Public Delegate Sub CollectionRowChangeEventHandler(ByVal sender As Object, ByVal e As CollectionRowChangeEvent)
    
    Public Delegate Sub tblrecievablesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblrecievablesRowChangeEvent)
    
    Public Delegate Sub tblstatementRowChangeEventHandler(ByVal sender As Object, ByVal e As tblstatementRowChangeEvent)
    
    Public Delegate Sub tblcollectedRowChangeEventHandler(ByVal sender As Object, ByVal e As tblcollectedRowChangeEvent)
    
    Public Delegate Sub tblallstatementRowChangeEventHandler(ByVal sender As Object, ByVal e As tblallstatementRowChangeEvent)
    
    Public Delegate Sub tblimagesRowChangeEventHandler(ByVal sender As Object, ByVal e As tblimagesRowChangeEvent)
    
    Public Delegate Sub tbldrreportRowChangeEventHandler(ByVal sender As Object, ByVal e As tbldrreportRowChangeEvent)
    
    Public Delegate Sub tblchargenewRowChangeEventHandler(ByVal sender As Object, ByVal e As tblchargenewRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblrecievedDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblrecievedRow)
        
        Private columnpono As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columnsuppname As Global.System.Data.DataColumn
        
        Private columnsalesperson As Global.System.Data.DataColumn
        
        Private columnaddress As Global.System.Data.DataColumn
        
        Private columncontactno As Global.System.Data.DataColumn
        
        Private columnforwader As Global.System.Data.DataColumn
        
        Private columnfcontact As Global.System.Data.DataColumn
        
        Private columnremarks As Global.System.Data.DataColumn
        
        Private columnitmdesc As Global.System.Data.DataColumn
        
        Private columncost As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnsize As Global.System.Data.DataColumn
        
        Private columnexpdate As Global.System.Data.DataColumn
        
        Private columnlotnumber As Global.System.Data.DataColumn
        
        Private columnstatus As Global.System.Data.DataColumn
        
        Private columnsuppno As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columnrecno As Global.System.Data.DataColumn
        
        Private columnrecprep As Global.System.Data.DataColumn
        
        Private columnrecchek As Global.System.Data.DataColumn
        
        Private columnrdate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblrecieved"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ponoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suppnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuppname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property salespersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesperson
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contactnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontactno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property forwaderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnforwader
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fcontactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfcontact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itmdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitmdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lotnumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlotnumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property statusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnstatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property suppnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsuppno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property recnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrecno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property recprepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrecprep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property recchekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrecchek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblrecievedRow
            Get
                Return CType(Me.Rows(index),tblrecievedRow)
            End Get
        End Property
        
        Public Event tblrecievedRowChanging As tblrecievedRowChangeEventHandler
        
        Public Event tblrecievedRowChanged As tblrecievedRowChangeEventHandler
        
        Public Event tblrecievedRowDeleting As tblrecievedRowChangeEventHandler
        
        Public Event tblrecievedRowDeleted As tblrecievedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblrecievedRow(ByVal row As tblrecievedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblrecievedRow( _
                    ByVal pono As String,  _
                    ByVal tdate As String,  _
                    ByVal suppname As String,  _
                    ByVal salesperson As String,  _
                    ByVal address As String,  _
                    ByVal contactno As String,  _
                    ByVal forwader As String,  _
                    ByVal fcontact As String,  _
                    ByVal remarks As String,  _
                    ByVal itmdesc As String,  _
                    ByVal cost As String,  _
                    ByVal qty As String,  _
                    ByVal unit As String,  _
                    ByVal size As String,  _
                    ByVal expdate As String,  _
                    ByVal lotnumber As String,  _
                    ByVal status As String,  _
                    ByVal suppno As String,  _
                    ByVal prepby As String,  _
                    ByVal appby As String,  _
                    ByVal recno As String,  _
                    ByVal recprep As String,  _
                    ByVal recchek As String,  _
                    ByVal rdate As String) As tblrecievedRow
            Dim rowtblrecievedRow As tblrecievedRow = CType(Me.NewRow,tblrecievedRow)
            Dim columnValuesArray() As Object = New Object() {pono, tdate, suppname, salesperson, address, contactno, forwader, fcontact, remarks, itmdesc, cost, qty, unit, size, expdate, lotnumber, status, suppno, prepby, appby, recno, recprep, recchek, rdate}
            rowtblrecievedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblrecievedRow)
            Return rowtblrecievedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblrecievedDataTable = CType(MyBase.Clone,tblrecievedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblrecievedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnpono = MyBase.Columns("pono")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columnsuppname = MyBase.Columns("suppname")
            Me.columnsalesperson = MyBase.Columns("salesperson")
            Me.columnaddress = MyBase.Columns("address")
            Me.columncontactno = MyBase.Columns("contactno")
            Me.columnforwader = MyBase.Columns("forwader")
            Me.columnfcontact = MyBase.Columns("fcontact")
            Me.columnremarks = MyBase.Columns("remarks")
            Me.columnitmdesc = MyBase.Columns("itmdesc")
            Me.columncost = MyBase.Columns("cost")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnsize = MyBase.Columns("size")
            Me.columnexpdate = MyBase.Columns("expdate")
            Me.columnlotnumber = MyBase.Columns("lotnumber")
            Me.columnstatus = MyBase.Columns("status")
            Me.columnsuppno = MyBase.Columns("suppno")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columnrecno = MyBase.Columns("recno")
            Me.columnrecprep = MyBase.Columns("recprep")
            Me.columnrecchek = MyBase.Columns("recchek")
            Me.columnrdate = MyBase.Columns("rdate")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnpono = New Global.System.Data.DataColumn("pono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpono)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columnsuppname = New Global.System.Data.DataColumn("suppname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuppname)
            Me.columnsalesperson = New Global.System.Data.DataColumn("salesperson", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesperson)
            Me.columnaddress = New Global.System.Data.DataColumn("address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress)
            Me.columncontactno = New Global.System.Data.DataColumn("contactno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontactno)
            Me.columnforwader = New Global.System.Data.DataColumn("forwader", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnforwader)
            Me.columnfcontact = New Global.System.Data.DataColumn("fcontact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfcontact)
            Me.columnremarks = New Global.System.Data.DataColumn("remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremarks)
            Me.columnitmdesc = New Global.System.Data.DataColumn("itmdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitmdesc)
            Me.columncost = New Global.System.Data.DataColumn("cost", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncost)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnsize = New Global.System.Data.DataColumn("size", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsize)
            Me.columnexpdate = New Global.System.Data.DataColumn("expdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpdate)
            Me.columnlotnumber = New Global.System.Data.DataColumn("lotnumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlotnumber)
            Me.columnstatus = New Global.System.Data.DataColumn("status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnstatus)
            Me.columnsuppno = New Global.System.Data.DataColumn("suppno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsuppno)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columnrecno = New Global.System.Data.DataColumn("recno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrecno)
            Me.columnrecprep = New Global.System.Data.DataColumn("recprep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrecprep)
            Me.columnrecchek = New Global.System.Data.DataColumn("recchek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrecchek)
            Me.columnrdate = New Global.System.Data.DataColumn("rdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrdate)
            Me.columnpono.AllowDBNull = false
            Me.columnpono.MaxLength = 45
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columnsuppname.AllowDBNull = false
            Me.columnsuppname.MaxLength = 45
            Me.columnsalesperson.AllowDBNull = false
            Me.columnsalesperson.MaxLength = 45
            Me.columnaddress.AllowDBNull = false
            Me.columnaddress.MaxLength = 45
            Me.columncontactno.AllowDBNull = false
            Me.columncontactno.MaxLength = 45
            Me.columnforwader.AllowDBNull = false
            Me.columnforwader.MaxLength = 45
            Me.columnfcontact.AllowDBNull = false
            Me.columnfcontact.MaxLength = 45
            Me.columnremarks.AllowDBNull = false
            Me.columnremarks.MaxLength = 100
            Me.columnitmdesc.AllowDBNull = false
            Me.columnitmdesc.MaxLength = 45
            Me.columncost.AllowDBNull = false
            Me.columncost.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnqty.MaxLength = 45
            Me.columnunit.AllowDBNull = false
            Me.columnunit.MaxLength = 45
            Me.columnsize.AllowDBNull = false
            Me.columnsize.MaxLength = 45
            Me.columnexpdate.AllowDBNull = false
            Me.columnexpdate.MaxLength = 45
            Me.columnlotnumber.AllowDBNull = false
            Me.columnlotnumber.MaxLength = 45
            Me.columnstatus.AllowDBNull = false
            Me.columnstatus.MaxLength = 45
            Me.columnsuppno.AllowDBNull = false
            Me.columnsuppno.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columnrecno.AllowDBNull = false
            Me.columnrecno.MaxLength = 45
            Me.columnrecprep.AllowDBNull = false
            Me.columnrecprep.MaxLength = 45
            Me.columnrecchek.AllowDBNull = false
            Me.columnrecchek.MaxLength = 45
            Me.columnrdate.AllowDBNull = false
            Me.columnrdate.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblrecievedRow() As tblrecievedRow
            Return CType(Me.NewRow,tblrecievedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblrecievedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblrecievedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblrecievedRowChangedEvent) Is Nothing) Then
                RaiseEvent tblrecievedRowChanged(Me, New tblrecievedRowChangeEvent(CType(e.Row,tblrecievedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblrecievedRowChangingEvent) Is Nothing) Then
                RaiseEvent tblrecievedRowChanging(Me, New tblrecievedRowChangeEvent(CType(e.Row,tblrecievedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblrecievedRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblrecievedRowDeleted(Me, New tblrecievedRowChangeEvent(CType(e.Row,tblrecievedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblrecievedRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblrecievedRowDeleting(Me, New tblrecievedRowChangeEvent(CType(e.Row,tblrecievedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblrecievedRow(ByVal row As tblrecievedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblrecievedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbldelieveryDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbldelieveryRow)
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columncustname As Global.System.Data.DataColumn
        
        Private columncustaddress As Global.System.Data.DataColumn
        
        Private columndelNo As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnitemdesc As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        Private columnpicktype As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbldelievery"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property delNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picktypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicktype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbldelieveryRow
            Get
                Return CType(Me.Rows(index),tbldelieveryRow)
            End Get
        End Property
        
        Public Event tbldelieveryRowChanging As tbldelieveryRowChangeEventHandler
        
        Public Event tbldelieveryRowChanged As tbldelieveryRowChangeEventHandler
        
        Public Event tbldelieveryRowDeleting As tbldelieveryRowChangeEventHandler
        
        Public Event tbldelieveryRowDeleted As tbldelieveryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtbldelieveryRow(ByVal row As tbldelieveryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtbldelieveryRow(ByVal tdate As String, ByVal custname As String, ByVal custaddress As String, ByVal delNo As String, ByVal prepby As String, ByVal appby As String, ByVal itemcode As String, ByVal itemdesc As String, ByVal qty As Double, ByVal uprice As Double, ByVal amount As Double, ByVal picktype As String) As tbldelieveryRow
            Dim rowtbldelieveryRow As tbldelieveryRow = CType(Me.NewRow,tbldelieveryRow)
            Dim columnValuesArray() As Object = New Object() {tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc, qty, uprice, amount, picktype}
            rowtbldelieveryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbldelieveryRow)
            Return rowtbldelieveryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbldelieveryDataTable = CType(MyBase.Clone,tbldelieveryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbldelieveryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntdate = MyBase.Columns("tdate")
            Me.columncustname = MyBase.Columns("custname")
            Me.columncustaddress = MyBase.Columns("custaddress")
            Me.columndelNo = MyBase.Columns("delNo")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnitemdesc = MyBase.Columns("itemdesc")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnamount = MyBase.Columns("amount")
            Me.columnpicktype = MyBase.Columns("picktype")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columncustname = New Global.System.Data.DataColumn("custname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustname)
            Me.columncustaddress = New Global.System.Data.DataColumn("custaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustaddress)
            Me.columndelNo = New Global.System.Data.DataColumn("delNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndelNo)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New Global.System.Data.DataColumn("itemdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemdesc)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
            Me.columnpicktype = New Global.System.Data.DataColumn("picktype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicktype)
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columncustname.AllowDBNull = false
            Me.columncustname.MaxLength = 45
            Me.columncustaddress.AllowDBNull = false
            Me.columncustaddress.MaxLength = 45
            Me.columndelNo.AllowDBNull = false
            Me.columndelNo.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemcode.MaxLength = 45
            Me.columnitemdesc.AllowDBNull = false
            Me.columnitemdesc.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnuprice.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columnpicktype.AllowDBNull = false
            Me.columnpicktype.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtbldelieveryRow() As tbldelieveryRow
            Return CType(Me.NewRow,tbldelieveryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbldelieveryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbldelieveryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbldelieveryRowChangedEvent) Is Nothing) Then
                RaiseEvent tbldelieveryRowChanged(Me, New tbldelieveryRowChangeEvent(CType(e.Row,tbldelieveryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbldelieveryRowChangingEvent) Is Nothing) Then
                RaiseEvent tbldelieveryRowChanging(Me, New tbldelieveryRowChangeEvent(CType(e.Row,tbldelieveryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbldelieveryRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbldelieveryRowDeleted(Me, New tbldelieveryRowChangeEvent(CType(e.Row,tbldelieveryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbldelieveryRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbldelieveryRowDeleting(Me, New tbldelieveryRowChangeEvent(CType(e.Row,tbldelieveryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetbldelieveryRow(ByVal row As tbldelieveryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbldelieveryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblpurchaseDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblpurchaseRow)
        
        Private columnPtype As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columncustname As Global.System.Data.DataColumn
        
        Private columncustaddress As Global.System.Data.DataColumn
        
        Private columndelNo As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnitemdesc As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnamount As Global.System.Data.DataColumn
        
        Private columnpicktype As Global.System.Data.DataColumn
        
        Private columnpayment As Global.System.Data.DataColumn
        
        Private columntcost As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columntsize As Global.System.Data.DataColumn
        
        Private columnlnbn As Global.System.Data.DataColumn
        
        Private columnexpdate As Global.System.Data.DataColumn
        
        Private columnpr As Global.System.Data.DataColumn
        
        Private columntr As Global.System.Data.DataColumn
        
        Private columnbrefdesc As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblpurchase"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PtypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property delNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picktypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicktype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tcostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntcost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tsizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntsize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lnbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlnbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property brefdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbrefdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblpurchaseRow
            Get
                Return CType(Me.Rows(index),tblpurchaseRow)
            End Get
        End Property
        
        Public Event tblpurchaseRowChanging As tblpurchaseRowChangeEventHandler
        
        Public Event tblpurchaseRowChanged As tblpurchaseRowChangeEventHandler
        
        Public Event tblpurchaseRowDeleting As tblpurchaseRowChangeEventHandler
        
        Public Event tblpurchaseRowDeleted As tblpurchaseRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblpurchaseRow(ByVal row As tblpurchaseRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblpurchaseRow( _
                    ByVal Ptype As String,  _
                    ByVal tdate As String,  _
                    ByVal custname As String,  _
                    ByVal custaddress As String,  _
                    ByVal delNo As String,  _
                    ByVal prepby As String,  _
                    ByVal appby As String,  _
                    ByVal itemcode As String,  _
                    ByVal itemdesc As String,  _
                    ByVal qty As Double,  _
                    ByVal uprice As Double,  _
                    ByVal amount As Double,  _
                    ByVal picktype As String,  _
                    ByVal payment As Double,  _
                    ByVal tcost As Double,  _
                    ByVal unit As String,  _
                    ByVal tsize As String,  _
                    ByVal lnbn As String,  _
                    ByVal expdate As String,  _
                    ByVal pr As String,  _
                    ByVal tr As String,  _
                    ByVal brefdesc As String) As tblpurchaseRow
            Dim rowtblpurchaseRow As tblpurchaseRow = CType(Me.NewRow,tblpurchaseRow)
            Dim columnValuesArray() As Object = New Object() {Ptype, tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc, qty, uprice, amount, picktype, payment, tcost, unit, tsize, lnbn, expdate, pr, tr, brefdesc}
            rowtblpurchaseRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblpurchaseRow)
            Return rowtblpurchaseRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblpurchaseDataTable = CType(MyBase.Clone,tblpurchaseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblpurchaseDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPtype = MyBase.Columns("Ptype")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columncustname = MyBase.Columns("custname")
            Me.columncustaddress = MyBase.Columns("custaddress")
            Me.columndelNo = MyBase.Columns("delNo")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnitemdesc = MyBase.Columns("itemdesc")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnamount = MyBase.Columns("amount")
            Me.columnpicktype = MyBase.Columns("picktype")
            Me.columnpayment = MyBase.Columns("payment")
            Me.columntcost = MyBase.Columns("tcost")
            Me.columnunit = MyBase.Columns("unit")
            Me.columntsize = MyBase.Columns("tsize")
            Me.columnlnbn = MyBase.Columns("lnbn")
            Me.columnexpdate = MyBase.Columns("expdate")
            Me.columnpr = MyBase.Columns("pr")
            Me.columntr = MyBase.Columns("tr")
            Me.columnbrefdesc = MyBase.Columns("brefdesc")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPtype = New Global.System.Data.DataColumn("Ptype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtype)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columncustname = New Global.System.Data.DataColumn("custname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustname)
            Me.columncustaddress = New Global.System.Data.DataColumn("custaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustaddress)
            Me.columndelNo = New Global.System.Data.DataColumn("delNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndelNo)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New Global.System.Data.DataColumn("itemdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemdesc)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnamount = New Global.System.Data.DataColumn("amount", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamount)
            Me.columnpicktype = New Global.System.Data.DataColumn("picktype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicktype)
            Me.columnpayment = New Global.System.Data.DataColumn("payment", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayment)
            Me.columntcost = New Global.System.Data.DataColumn("tcost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntcost)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columntsize = New Global.System.Data.DataColumn("tsize", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntsize)
            Me.columnlnbn = New Global.System.Data.DataColumn("lnbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlnbn)
            Me.columnexpdate = New Global.System.Data.DataColumn("expdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpdate)
            Me.columnpr = New Global.System.Data.DataColumn("pr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpr)
            Me.columntr = New Global.System.Data.DataColumn("tr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntr)
            Me.columnbrefdesc = New Global.System.Data.DataColumn("brefdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbrefdesc)
            Me.columnPtype.AllowDBNull = false
            Me.columnPtype.MaxLength = 45
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columncustname.AllowDBNull = false
            Me.columncustname.MaxLength = 45
            Me.columncustaddress.AllowDBNull = false
            Me.columncustaddress.MaxLength = 45
            Me.columndelNo.AllowDBNull = false
            Me.columndelNo.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemcode.MaxLength = 45
            Me.columnitemdesc.AllowDBNull = false
            Me.columnitemdesc.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnuprice.AllowDBNull = false
            Me.columnamount.AllowDBNull = false
            Me.columnpicktype.AllowDBNull = false
            Me.columnpicktype.MaxLength = 45
            Me.columnpayment.AllowDBNull = false
            Me.columntcost.AllowDBNull = false
            Me.columnunit.AllowDBNull = false
            Me.columnunit.MaxLength = 45
            Me.columntsize.AllowDBNull = false
            Me.columntsize.MaxLength = 45
            Me.columnlnbn.AllowDBNull = false
            Me.columnlnbn.MaxLength = 45
            Me.columnexpdate.AllowDBNull = false
            Me.columnexpdate.MaxLength = 45
            Me.columnpr.AllowDBNull = false
            Me.columnpr.MaxLength = 45
            Me.columntr.AllowDBNull = false
            Me.columntr.MaxLength = 45
            Me.columnbrefdesc.AllowDBNull = false
            Me.columnbrefdesc.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblpurchaseRow() As tblpurchaseRow
            Return CType(Me.NewRow,tblpurchaseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblpurchaseRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblpurchaseRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblpurchaseRowChangedEvent) Is Nothing) Then
                RaiseEvent tblpurchaseRowChanged(Me, New tblpurchaseRowChangeEvent(CType(e.Row,tblpurchaseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblpurchaseRowChangingEvent) Is Nothing) Then
                RaiseEvent tblpurchaseRowChanging(Me, New tblpurchaseRowChangeEvent(CType(e.Row,tblpurchaseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblpurchaseRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblpurchaseRowDeleted(Me, New tblpurchaseRowChangeEvent(CType(e.Row,tblpurchaseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblpurchaseRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblpurchaseRowDeleting(Me, New tblpurchaseRowChangeEvent(CType(e.Row,tblpurchaseRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblpurchaseRow(ByVal row As tblpurchaseRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblpurchaseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CollectionDataTable
        Inherits Global.System.Data.TypedTableBase(Of CollectionRow)
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columncustname As Global.System.Data.DataColumn
        
        Private columncustaddress As Global.System.Data.DataColumn
        
        Private columndelNo As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnitemdesc As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnpicktype As Global.System.Data.DataColumn
        
        Private columntcost As Global.System.Data.DataColumn
        
        Private columndatecol As Global.System.Data.DataColumn
        
        Private columnclientno As Global.System.Data.DataColumn
        
        Private columncollectionno As Global.System.Data.DataColumn
        
        Private _columnsum_amount_ As Global.System.Data.DataColumn
        
        Private _columnsum_payment_ As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Collection"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property delNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picktypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicktype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tcostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntcost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datecolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatecol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clientnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclientno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property collectionnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncollectionno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _sum_amount_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnsum_amount_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property _sum_payment_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnsum_payment_
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CollectionRow
            Get
                Return CType(Me.Rows(index),CollectionRow)
            End Get
        End Property
        
        Public Event CollectionRowChanging As CollectionRowChangeEventHandler
        
        Public Event CollectionRowChanged As CollectionRowChangeEventHandler
        
        Public Event CollectionRowDeleting As CollectionRowChangeEventHandler
        
        Public Event CollectionRowDeleted As CollectionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCollectionRow(ByVal row As CollectionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCollectionRow( _
                    ByVal tdate As String,  _
                    ByVal custname As String,  _
                    ByVal custaddress As String,  _
                    ByVal delNo As String,  _
                    ByVal prepby As String,  _
                    ByVal appby As String,  _
                    ByVal itemcode As String,  _
                    ByVal itemdesc As String,  _
                    ByVal qty As Double,  _
                    ByVal uprice As Double,  _
                    ByVal picktype As String,  _
                    ByVal tcost As Double,  _
                    ByVal datecol As String,  _
                    ByVal clientno As String,  _
                    ByVal collectionno As String,  _
                    ByVal _sum_amount_ As Double,  _
                    ByVal _sum_payment_ As Double) As CollectionRow
            Dim rowCollectionRow As CollectionRow = CType(Me.NewRow,CollectionRow)
            Dim columnValuesArray() As Object = New Object() {tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc, qty, uprice, picktype, tcost, datecol, clientno, collectionno, _sum_amount_, _sum_payment_}
            rowCollectionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCollectionRow)
            Return rowCollectionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CollectionDataTable = CType(MyBase.Clone,CollectionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CollectionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntdate = MyBase.Columns("tdate")
            Me.columncustname = MyBase.Columns("custname")
            Me.columncustaddress = MyBase.Columns("custaddress")
            Me.columndelNo = MyBase.Columns("delNo")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnitemdesc = MyBase.Columns("itemdesc")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnpicktype = MyBase.Columns("picktype")
            Me.columntcost = MyBase.Columns("tcost")
            Me.columndatecol = MyBase.Columns("datecol")
            Me.columnclientno = MyBase.Columns("clientno")
            Me.columncollectionno = MyBase.Columns("collectionno")
            Me._columnsum_amount_ = MyBase.Columns("sum(amount)")
            Me._columnsum_payment_ = MyBase.Columns("sum(payment)")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columncustname = New Global.System.Data.DataColumn("custname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustname)
            Me.columncustaddress = New Global.System.Data.DataColumn("custaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustaddress)
            Me.columndelNo = New Global.System.Data.DataColumn("delNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndelNo)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New Global.System.Data.DataColumn("itemdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemdesc)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnpicktype = New Global.System.Data.DataColumn("picktype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicktype)
            Me.columntcost = New Global.System.Data.DataColumn("tcost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntcost)
            Me.columndatecol = New Global.System.Data.DataColumn("datecol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatecol)
            Me.columnclientno = New Global.System.Data.DataColumn("clientno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclientno)
            Me.columncollectionno = New Global.System.Data.DataColumn("collectionno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncollectionno)
            Me._columnsum_amount_ = New Global.System.Data.DataColumn("sum(amount)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnsum_amount_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnsum_amount_")
            Me._columnsum_amount_.ExtendedProperties.Add("Generator_UserColumnName", "sum(amount)")
            MyBase.Columns.Add(Me._columnsum_amount_)
            Me._columnsum_payment_ = New Global.System.Data.DataColumn("sum(payment)", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            Me._columnsum_payment_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnsum_payment_")
            Me._columnsum_payment_.ExtendedProperties.Add("Generator_UserColumnName", "sum(payment)")
            MyBase.Columns.Add(Me._columnsum_payment_)
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columncustname.AllowDBNull = false
            Me.columncustname.MaxLength = 45
            Me.columncustaddress.AllowDBNull = false
            Me.columncustaddress.MaxLength = 45
            Me.columndelNo.AllowDBNull = false
            Me.columndelNo.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemcode.MaxLength = 45
            Me.columnitemdesc.AllowDBNull = false
            Me.columnitemdesc.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnuprice.AllowDBNull = false
            Me.columnpicktype.AllowDBNull = false
            Me.columnpicktype.MaxLength = 45
            Me.columntcost.AllowDBNull = false
            Me.columndatecol.AllowDBNull = false
            Me.columndatecol.MaxLength = 45
            Me.columnclientno.AllowDBNull = false
            Me.columnclientno.MaxLength = 45
            Me.columncollectionno.AllowDBNull = false
            Me.columncollectionno.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCollectionRow() As CollectionRow
            Return CType(Me.NewRow,CollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CollectionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CollectionRowChangedEvent) Is Nothing) Then
                RaiseEvent CollectionRowChanged(Me, New CollectionRowChangeEvent(CType(e.Row,CollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CollectionRowChangingEvent) Is Nothing) Then
                RaiseEvent CollectionRowChanging(Me, New CollectionRowChangeEvent(CType(e.Row,CollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CollectionRowDeletedEvent) Is Nothing) Then
                RaiseEvent CollectionRowDeleted(Me, New CollectionRowChangeEvent(CType(e.Row,CollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CollectionRowDeletingEvent) Is Nothing) Then
                RaiseEvent CollectionRowDeleting(Me, New CollectionRowChangeEvent(CType(e.Row,CollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCollectionRow(ByVal row As CollectionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CollectionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblrecievablesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblrecievablesRow)
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columncustname As Global.System.Data.DataColumn
        
        Private columncustaddress As Global.System.Data.DataColumn
        
        Private columndelNo As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnitemdesc As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnpicktype As Global.System.Data.DataColumn
        
        Private columntcost As Global.System.Data.DataColumn
        
        Private columnpayment As Global.System.Data.DataColumn
        
        Private columntotalall As Global.System.Data.DataColumn
        
        Private columnclientno As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblrecievables"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property delNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picktypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicktype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tcostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntcost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property paymentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpayment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalallColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotalall
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clientnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclientno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblrecievablesRow
            Get
                Return CType(Me.Rows(index),tblrecievablesRow)
            End Get
        End Property
        
        Public Event tblrecievablesRowChanging As tblrecievablesRowChangeEventHandler
        
        Public Event tblrecievablesRowChanged As tblrecievablesRowChangeEventHandler
        
        Public Event tblrecievablesRowDeleting As tblrecievablesRowChangeEventHandler
        
        Public Event tblrecievablesRowDeleted As tblrecievablesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblrecievablesRow(ByVal row As tblrecievablesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblrecievablesRow(ByVal tdate As String, ByVal custname As String, ByVal custaddress As String, ByVal delNo As String, ByVal prepby As String, ByVal appby As String, ByVal itemcode As String, ByVal itemdesc As String, ByVal qty As Double, ByVal uprice As Double, ByVal picktype As String, ByVal tcost As Double, ByVal payment As Double, ByVal totalall As Double, ByVal clientno As String) As tblrecievablesRow
            Dim rowtblrecievablesRow As tblrecievablesRow = CType(Me.NewRow,tblrecievablesRow)
            Dim columnValuesArray() As Object = New Object() {tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc, qty, uprice, picktype, tcost, payment, totalall, clientno}
            rowtblrecievablesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblrecievablesRow)
            Return rowtblrecievablesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblrecievablesDataTable = CType(MyBase.Clone,tblrecievablesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblrecievablesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntdate = MyBase.Columns("tdate")
            Me.columncustname = MyBase.Columns("custname")
            Me.columncustaddress = MyBase.Columns("custaddress")
            Me.columndelNo = MyBase.Columns("delNo")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnitemdesc = MyBase.Columns("itemdesc")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnpicktype = MyBase.Columns("picktype")
            Me.columntcost = MyBase.Columns("tcost")
            Me.columnpayment = MyBase.Columns("payment")
            Me.columntotalall = MyBase.Columns("totalall")
            Me.columnclientno = MyBase.Columns("clientno")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columncustname = New Global.System.Data.DataColumn("custname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustname)
            Me.columncustaddress = New Global.System.Data.DataColumn("custaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustaddress)
            Me.columndelNo = New Global.System.Data.DataColumn("delNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndelNo)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New Global.System.Data.DataColumn("itemdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemdesc)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnpicktype = New Global.System.Data.DataColumn("picktype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicktype)
            Me.columntcost = New Global.System.Data.DataColumn("tcost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntcost)
            Me.columnpayment = New Global.System.Data.DataColumn("payment", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpayment)
            Me.columntotalall = New Global.System.Data.DataColumn("totalall", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotalall)
            Me.columnclientno = New Global.System.Data.DataColumn("clientno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclientno)
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columncustname.AllowDBNull = false
            Me.columncustname.MaxLength = 45
            Me.columncustaddress.AllowDBNull = false
            Me.columncustaddress.MaxLength = 45
            Me.columndelNo.AllowDBNull = false
            Me.columndelNo.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemcode.MaxLength = 45
            Me.columnitemdesc.AllowDBNull = false
            Me.columnitemdesc.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnuprice.AllowDBNull = false
            Me.columnpicktype.AllowDBNull = false
            Me.columnpicktype.MaxLength = 45
            Me.columntcost.AllowDBNull = false
            Me.columnpayment.AllowDBNull = false
            Me.columnclientno.AllowDBNull = false
            Me.columnclientno.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblrecievablesRow() As tblrecievablesRow
            Return CType(Me.NewRow,tblrecievablesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblrecievablesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblrecievablesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblrecievablesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblrecievablesRowChanged(Me, New tblrecievablesRowChangeEvent(CType(e.Row,tblrecievablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblrecievablesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblrecievablesRowChanging(Me, New tblrecievablesRowChangeEvent(CType(e.Row,tblrecievablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblrecievablesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblrecievablesRowDeleted(Me, New tblrecievablesRowChangeEvent(CType(e.Row,tblrecievablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblrecievablesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblrecievablesRowDeleting(Me, New tblrecievablesRowChangeEvent(CType(e.Row,tblrecievablesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblrecievablesRow(ByVal row As tblrecievablesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblrecievablesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblstatementDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblstatementRow)
        
        Private columnPtype As Global.System.Data.DataColumn
        
        Private columnPStatus As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columncustname As Global.System.Data.DataColumn
        
        Private columncustaddress As Global.System.Data.DataColumn
        
        Private columndelNo As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnitemdesc As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnpicktype As Global.System.Data.DataColumn
        
        Private columntcost As Global.System.Data.DataColumn
        
        Private columnclientno As Global.System.Data.DataColumn
        
        Private columndatecol As Global.System.Data.DataColumn
        
        Private columnamnt As Global.System.Data.DataColumn
        
        Private columnpmnt As Global.System.Data.DataColumn
        
        Private columncollectionno As Global.System.Data.DataColumn
        
        Private columnchkno As Global.System.Data.DataColumn
        
        Private columncashrecieved As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblstatement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PtypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property delNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picktypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicktype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tcostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntcost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clientnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclientno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datecolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatecol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property collectionnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncollectionno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chknoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashrecievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashrecieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblstatementRow
            Get
                Return CType(Me.Rows(index),tblstatementRow)
            End Get
        End Property
        
        Public Event tblstatementRowChanging As tblstatementRowChangeEventHandler
        
        Public Event tblstatementRowChanged As tblstatementRowChangeEventHandler
        
        Public Event tblstatementRowDeleting As tblstatementRowChangeEventHandler
        
        Public Event tblstatementRowDeleted As tblstatementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblstatementRow(ByVal row As tblstatementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblstatementRow( _
                    ByVal Ptype As String,  _
                    ByVal PStatus As String,  _
                    ByVal tdate As String,  _
                    ByVal custname As String,  _
                    ByVal custaddress As String,  _
                    ByVal delNo As String,  _
                    ByVal prepby As String,  _
                    ByVal appby As String,  _
                    ByVal itemcode As String,  _
                    ByVal itemdesc As String,  _
                    ByVal qty As Double,  _
                    ByVal uprice As Double,  _
                    ByVal picktype As String,  _
                    ByVal tcost As Double,  _
                    ByVal clientno As String,  _
                    ByVal datecol As String,  _
                    ByVal amnt As Double,  _
                    ByVal pmnt As Double,  _
                    ByVal collectionno As String,  _
                    ByVal chkno As String,  _
                    ByVal cashrecieved As Double) As tblstatementRow
            Dim rowtblstatementRow As tblstatementRow = CType(Me.NewRow,tblstatementRow)
            Dim columnValuesArray() As Object = New Object() {Ptype, PStatus, tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc, qty, uprice, picktype, tcost, clientno, datecol, amnt, pmnt, collectionno, chkno, cashrecieved}
            rowtblstatementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblstatementRow)
            Return rowtblstatementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblstatementDataTable = CType(MyBase.Clone,tblstatementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblstatementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPtype = MyBase.Columns("Ptype")
            Me.columnPStatus = MyBase.Columns("PStatus")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columncustname = MyBase.Columns("custname")
            Me.columncustaddress = MyBase.Columns("custaddress")
            Me.columndelNo = MyBase.Columns("delNo")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnitemdesc = MyBase.Columns("itemdesc")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnpicktype = MyBase.Columns("picktype")
            Me.columntcost = MyBase.Columns("tcost")
            Me.columnclientno = MyBase.Columns("clientno")
            Me.columndatecol = MyBase.Columns("datecol")
            Me.columnamnt = MyBase.Columns("amnt")
            Me.columnpmnt = MyBase.Columns("pmnt")
            Me.columncollectionno = MyBase.Columns("collectionno")
            Me.columnchkno = MyBase.Columns("chkno")
            Me.columncashrecieved = MyBase.Columns("cashrecieved")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPtype = New Global.System.Data.DataColumn("Ptype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtype)
            Me.columnPStatus = New Global.System.Data.DataColumn("PStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPStatus)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columncustname = New Global.System.Data.DataColumn("custname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustname)
            Me.columncustaddress = New Global.System.Data.DataColumn("custaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustaddress)
            Me.columndelNo = New Global.System.Data.DataColumn("delNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndelNo)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New Global.System.Data.DataColumn("itemdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemdesc)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnpicktype = New Global.System.Data.DataColumn("picktype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicktype)
            Me.columntcost = New Global.System.Data.DataColumn("tcost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntcost)
            Me.columnclientno = New Global.System.Data.DataColumn("clientno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclientno)
            Me.columndatecol = New Global.System.Data.DataColumn("datecol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatecol)
            Me.columnamnt = New Global.System.Data.DataColumn("amnt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamnt)
            Me.columnpmnt = New Global.System.Data.DataColumn("pmnt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpmnt)
            Me.columncollectionno = New Global.System.Data.DataColumn("collectionno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncollectionno)
            Me.columnchkno = New Global.System.Data.DataColumn("chkno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkno)
            Me.columncashrecieved = New Global.System.Data.DataColumn("cashrecieved", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashrecieved)
            Me.columnPtype.AllowDBNull = false
            Me.columnPtype.MaxLength = 45
            Me.columnPStatus.AllowDBNull = false
            Me.columnPStatus.MaxLength = 45
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columncustname.AllowDBNull = false
            Me.columncustname.MaxLength = 45
            Me.columncustaddress.AllowDBNull = false
            Me.columncustaddress.MaxLength = 45
            Me.columndelNo.AllowDBNull = false
            Me.columndelNo.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemcode.MaxLength = 45
            Me.columnitemdesc.AllowDBNull = false
            Me.columnitemdesc.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnuprice.AllowDBNull = false
            Me.columnpicktype.AllowDBNull = false
            Me.columnpicktype.MaxLength = 45
            Me.columntcost.AllowDBNull = false
            Me.columnclientno.AllowDBNull = false
            Me.columnclientno.MaxLength = 45
            Me.columndatecol.AllowDBNull = false
            Me.columndatecol.MaxLength = 45
            Me.columncollectionno.AllowDBNull = false
            Me.columncollectionno.MaxLength = 45
            Me.columnchkno.AllowDBNull = false
            Me.columnchkno.MaxLength = 45
            Me.columncashrecieved.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblstatementRow() As tblstatementRow
            Return CType(Me.NewRow,tblstatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblstatementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblstatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblstatementRowChangedEvent) Is Nothing) Then
                RaiseEvent tblstatementRowChanged(Me, New tblstatementRowChangeEvent(CType(e.Row,tblstatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblstatementRowChangingEvent) Is Nothing) Then
                RaiseEvent tblstatementRowChanging(Me, New tblstatementRowChangeEvent(CType(e.Row,tblstatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblstatementRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblstatementRowDeleted(Me, New tblstatementRowChangeEvent(CType(e.Row,tblstatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblstatementRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblstatementRowDeleting(Me, New tblstatementRowChangeEvent(CType(e.Row,tblstatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblstatementRow(ByVal row As tblstatementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblstatementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblcollectedDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblcollectedRow)
        
        Private columnPtype As Global.System.Data.DataColumn
        
        Private columnPStatus As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columncustname As Global.System.Data.DataColumn
        
        Private columncustaddress As Global.System.Data.DataColumn
        
        Private columndelNo As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnitemdesc As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnamnt As Global.System.Data.DataColumn
        
        Private columnpicktype As Global.System.Data.DataColumn
        
        Private columnpmnt As Global.System.Data.DataColumn
        
        Private columntcost As Global.System.Data.DataColumn
        
        Private columnclientno As Global.System.Data.DataColumn
        
        Private columndatecol As Global.System.Data.DataColumn
        
        Private columncollectionno As Global.System.Data.DataColumn
        
        Private columnchkno As Global.System.Data.DataColumn
        
        Private columncashrecieved As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblcollected"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PtypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property delNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picktypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicktype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tcostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntcost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clientnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclientno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datecolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatecol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property collectionnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncollectionno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chknoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashrecievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashrecieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblcollectedRow
            Get
                Return CType(Me.Rows(index),tblcollectedRow)
            End Get
        End Property
        
        Public Event tblcollectedRowChanging As tblcollectedRowChangeEventHandler
        
        Public Event tblcollectedRowChanged As tblcollectedRowChangeEventHandler
        
        Public Event tblcollectedRowDeleting As tblcollectedRowChangeEventHandler
        
        Public Event tblcollectedRowDeleted As tblcollectedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblcollectedRow(ByVal row As tblcollectedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblcollectedRow( _
                    ByVal Ptype As String,  _
                    ByVal PStatus As String,  _
                    ByVal tdate As String,  _
                    ByVal custname As String,  _
                    ByVal custaddress As String,  _
                    ByVal delNo As String,  _
                    ByVal prepby As String,  _
                    ByVal appby As String,  _
                    ByVal itemcode As String,  _
                    ByVal itemdesc As String,  _
                    ByVal qty As Double,  _
                    ByVal uprice As Double,  _
                    ByVal amnt As Double,  _
                    ByVal picktype As String,  _
                    ByVal pmnt As Double,  _
                    ByVal tcost As Double,  _
                    ByVal clientno As String,  _
                    ByVal datecol As String,  _
                    ByVal collectionno As String,  _
                    ByVal chkno As String,  _
                    ByVal cashrecieved As Double) As tblcollectedRow
            Dim rowtblcollectedRow As tblcollectedRow = CType(Me.NewRow,tblcollectedRow)
            Dim columnValuesArray() As Object = New Object() {Ptype, PStatus, tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc, qty, uprice, amnt, picktype, pmnt, tcost, clientno, datecol, collectionno, chkno, cashrecieved}
            rowtblcollectedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblcollectedRow)
            Return rowtblcollectedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblcollectedDataTable = CType(MyBase.Clone,tblcollectedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblcollectedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPtype = MyBase.Columns("Ptype")
            Me.columnPStatus = MyBase.Columns("PStatus")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columncustname = MyBase.Columns("custname")
            Me.columncustaddress = MyBase.Columns("custaddress")
            Me.columndelNo = MyBase.Columns("delNo")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnitemdesc = MyBase.Columns("itemdesc")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnamnt = MyBase.Columns("amnt")
            Me.columnpicktype = MyBase.Columns("picktype")
            Me.columnpmnt = MyBase.Columns("pmnt")
            Me.columntcost = MyBase.Columns("tcost")
            Me.columnclientno = MyBase.Columns("clientno")
            Me.columndatecol = MyBase.Columns("datecol")
            Me.columncollectionno = MyBase.Columns("collectionno")
            Me.columnchkno = MyBase.Columns("chkno")
            Me.columncashrecieved = MyBase.Columns("cashrecieved")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPtype = New Global.System.Data.DataColumn("Ptype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtype)
            Me.columnPStatus = New Global.System.Data.DataColumn("PStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPStatus)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columncustname = New Global.System.Data.DataColumn("custname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustname)
            Me.columncustaddress = New Global.System.Data.DataColumn("custaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustaddress)
            Me.columndelNo = New Global.System.Data.DataColumn("delNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndelNo)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New Global.System.Data.DataColumn("itemdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemdesc)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnamnt = New Global.System.Data.DataColumn("amnt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamnt)
            Me.columnpicktype = New Global.System.Data.DataColumn("picktype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicktype)
            Me.columnpmnt = New Global.System.Data.DataColumn("pmnt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpmnt)
            Me.columntcost = New Global.System.Data.DataColumn("tcost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntcost)
            Me.columnclientno = New Global.System.Data.DataColumn("clientno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclientno)
            Me.columndatecol = New Global.System.Data.DataColumn("datecol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatecol)
            Me.columncollectionno = New Global.System.Data.DataColumn("collectionno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncollectionno)
            Me.columnchkno = New Global.System.Data.DataColumn("chkno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkno)
            Me.columncashrecieved = New Global.System.Data.DataColumn("cashrecieved", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashrecieved)
            Me.columnPtype.AllowDBNull = false
            Me.columnPtype.MaxLength = 45
            Me.columnPStatus.AllowDBNull = false
            Me.columnPStatus.MaxLength = 45
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columncustname.AllowDBNull = false
            Me.columncustname.MaxLength = 45
            Me.columncustaddress.AllowDBNull = false
            Me.columncustaddress.MaxLength = 45
            Me.columndelNo.AllowDBNull = false
            Me.columndelNo.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemcode.MaxLength = 45
            Me.columnitemdesc.AllowDBNull = false
            Me.columnitemdesc.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnuprice.AllowDBNull = false
            Me.columnpicktype.AllowDBNull = false
            Me.columnpicktype.MaxLength = 45
            Me.columntcost.AllowDBNull = false
            Me.columnclientno.AllowDBNull = false
            Me.columnclientno.MaxLength = 45
            Me.columndatecol.AllowDBNull = false
            Me.columndatecol.MaxLength = 45
            Me.columncollectionno.AllowDBNull = false
            Me.columncollectionno.MaxLength = 45
            Me.columnchkno.AllowDBNull = false
            Me.columnchkno.MaxLength = 45
            Me.columncashrecieved.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblcollectedRow() As tblcollectedRow
            Return CType(Me.NewRow,tblcollectedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblcollectedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblcollectedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblcollectedRowChangedEvent) Is Nothing) Then
                RaiseEvent tblcollectedRowChanged(Me, New tblcollectedRowChangeEvent(CType(e.Row,tblcollectedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblcollectedRowChangingEvent) Is Nothing) Then
                RaiseEvent tblcollectedRowChanging(Me, New tblcollectedRowChangeEvent(CType(e.Row,tblcollectedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblcollectedRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblcollectedRowDeleted(Me, New tblcollectedRowChangeEvent(CType(e.Row,tblcollectedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblcollectedRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblcollectedRowDeleting(Me, New tblcollectedRowChangeEvent(CType(e.Row,tblcollectedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblcollectedRow(ByVal row As tblcollectedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblcollectedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblallstatementDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblallstatementRow)
        
        Private columnPtype As Global.System.Data.DataColumn
        
        Private columnPStatus As Global.System.Data.DataColumn
        
        Private columntdate As Global.System.Data.DataColumn
        
        Private columncustname As Global.System.Data.DataColumn
        
        Private columncustaddress As Global.System.Data.DataColumn
        
        Private columndelNo As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columnitemcode As Global.System.Data.DataColumn
        
        Private columnitemdesc As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnuprice As Global.System.Data.DataColumn
        
        Private columnamnt As Global.System.Data.DataColumn
        
        Private columnpicktype As Global.System.Data.DataColumn
        
        Private columnpmnt As Global.System.Data.DataColumn
        
        Private columntcost As Global.System.Data.DataColumn
        
        Private columnclientno As Global.System.Data.DataColumn
        
        Private columndatecol As Global.System.Data.DataColumn
        
        Private columncollectionno As Global.System.Data.DataColumn
        
        Private columnchkno As Global.System.Data.DataColumn
        
        Private columncashrecieved As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblallstatement"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PtypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPtype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property custaddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncustaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property delNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndelNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property itemdescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property upriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property amntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnamnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property picktypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpicktype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pmntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpmnt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tcostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntcost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clientnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclientno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property datecolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndatecol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property collectionnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncollectionno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property chknoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnchkno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cashrecievedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncashrecieved
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblallstatementRow
            Get
                Return CType(Me.Rows(index),tblallstatementRow)
            End Get
        End Property
        
        Public Event tblallstatementRowChanging As tblallstatementRowChangeEventHandler
        
        Public Event tblallstatementRowChanged As tblallstatementRowChangeEventHandler
        
        Public Event tblallstatementRowDeleting As tblallstatementRowChangeEventHandler
        
        Public Event tblallstatementRowDeleted As tblallstatementRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblallstatementRow(ByVal row As tblallstatementRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblallstatementRow( _
                    ByVal Ptype As String,  _
                    ByVal PStatus As String,  _
                    ByVal tdate As String,  _
                    ByVal custname As String,  _
                    ByVal custaddress As String,  _
                    ByVal delNo As String,  _
                    ByVal prepby As String,  _
                    ByVal appby As String,  _
                    ByVal itemcode As String,  _
                    ByVal itemdesc As String,  _
                    ByVal qty As Double,  _
                    ByVal uprice As Double,  _
                    ByVal amnt As Double,  _
                    ByVal picktype As String,  _
                    ByVal pmnt As Double,  _
                    ByVal tcost As Double,  _
                    ByVal clientno As String,  _
                    ByVal datecol As String,  _
                    ByVal collectionno As String,  _
                    ByVal chkno As String,  _
                    ByVal cashrecieved As Double) As tblallstatementRow
            Dim rowtblallstatementRow As tblallstatementRow = CType(Me.NewRow,tblallstatementRow)
            Dim columnValuesArray() As Object = New Object() {Ptype, PStatus, tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc, qty, uprice, amnt, picktype, pmnt, tcost, clientno, datecol, collectionno, chkno, cashrecieved}
            rowtblallstatementRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblallstatementRow)
            Return rowtblallstatementRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblallstatementDataTable = CType(MyBase.Clone,tblallstatementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblallstatementDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPtype = MyBase.Columns("Ptype")
            Me.columnPStatus = MyBase.Columns("PStatus")
            Me.columntdate = MyBase.Columns("tdate")
            Me.columncustname = MyBase.Columns("custname")
            Me.columncustaddress = MyBase.Columns("custaddress")
            Me.columndelNo = MyBase.Columns("delNo")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columnitemcode = MyBase.Columns("itemcode")
            Me.columnitemdesc = MyBase.Columns("itemdesc")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnuprice = MyBase.Columns("uprice")
            Me.columnamnt = MyBase.Columns("amnt")
            Me.columnpicktype = MyBase.Columns("picktype")
            Me.columnpmnt = MyBase.Columns("pmnt")
            Me.columntcost = MyBase.Columns("tcost")
            Me.columnclientno = MyBase.Columns("clientno")
            Me.columndatecol = MyBase.Columns("datecol")
            Me.columncollectionno = MyBase.Columns("collectionno")
            Me.columnchkno = MyBase.Columns("chkno")
            Me.columncashrecieved = MyBase.Columns("cashrecieved")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPtype = New Global.System.Data.DataColumn("Ptype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPtype)
            Me.columnPStatus = New Global.System.Data.DataColumn("PStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPStatus)
            Me.columntdate = New Global.System.Data.DataColumn("tdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntdate)
            Me.columncustname = New Global.System.Data.DataColumn("custname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustname)
            Me.columncustaddress = New Global.System.Data.DataColumn("custaddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncustaddress)
            Me.columndelNo = New Global.System.Data.DataColumn("delNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndelNo)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columnitemcode = New Global.System.Data.DataColumn("itemcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New Global.System.Data.DataColumn("itemdesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnitemdesc)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnuprice = New Global.System.Data.DataColumn("uprice", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuprice)
            Me.columnamnt = New Global.System.Data.DataColumn("amnt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnamnt)
            Me.columnpicktype = New Global.System.Data.DataColumn("picktype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpicktype)
            Me.columnpmnt = New Global.System.Data.DataColumn("pmnt", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpmnt)
            Me.columntcost = New Global.System.Data.DataColumn("tcost", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntcost)
            Me.columnclientno = New Global.System.Data.DataColumn("clientno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclientno)
            Me.columndatecol = New Global.System.Data.DataColumn("datecol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndatecol)
            Me.columncollectionno = New Global.System.Data.DataColumn("collectionno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncollectionno)
            Me.columnchkno = New Global.System.Data.DataColumn("chkno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnchkno)
            Me.columncashrecieved = New Global.System.Data.DataColumn("cashrecieved", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncashrecieved)
            Me.columnPtype.AllowDBNull = false
            Me.columnPtype.MaxLength = 45
            Me.columnPStatus.AllowDBNull = false
            Me.columnPStatus.MaxLength = 45
            Me.columntdate.AllowDBNull = false
            Me.columntdate.MaxLength = 45
            Me.columncustname.AllowDBNull = false
            Me.columncustname.MaxLength = 45
            Me.columncustaddress.AllowDBNull = false
            Me.columncustaddress.MaxLength = 45
            Me.columndelNo.AllowDBNull = false
            Me.columndelNo.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemcode.MaxLength = 45
            Me.columnitemdesc.AllowDBNull = false
            Me.columnitemdesc.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnuprice.AllowDBNull = false
            Me.columnpicktype.AllowDBNull = false
            Me.columnpicktype.MaxLength = 45
            Me.columntcost.AllowDBNull = false
            Me.columnclientno.AllowDBNull = false
            Me.columnclientno.MaxLength = 45
            Me.columndatecol.AllowDBNull = false
            Me.columndatecol.MaxLength = 45
            Me.columncollectionno.AllowDBNull = false
            Me.columncollectionno.MaxLength = 45
            Me.columnchkno.AllowDBNull = false
            Me.columnchkno.MaxLength = 45
            Me.columncashrecieved.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblallstatementRow() As tblallstatementRow
            Return CType(Me.NewRow,tblallstatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblallstatementRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblallstatementRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblallstatementRowChangedEvent) Is Nothing) Then
                RaiseEvent tblallstatementRowChanged(Me, New tblallstatementRowChangeEvent(CType(e.Row,tblallstatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblallstatementRowChangingEvent) Is Nothing) Then
                RaiseEvent tblallstatementRowChanging(Me, New tblallstatementRowChangeEvent(CType(e.Row,tblallstatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblallstatementRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblallstatementRowDeleted(Me, New tblallstatementRowChangeEvent(CType(e.Row,tblallstatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblallstatementRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblallstatementRowDeleting(Me, New tblallstatementRowChangeEvent(CType(e.Row,tblallstatementRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblallstatementRow(ByVal row As tblallstatementRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblallstatementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblimagesDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblimagesRow)
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnTrno As Global.System.Data.DataColumn
        
        Private columntrimage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblimages"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trimageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrimage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblimagesRow
            Get
                Return CType(Me.Rows(index),tblimagesRow)
            End Get
        End Property
        
        Public Event tblimagesRowChanging As tblimagesRowChangeEventHandler
        
        Public Event tblimagesRowChanged As tblimagesRowChangeEventHandler
        
        Public Event tblimagesRowDeleting As tblimagesRowChangeEventHandler
        
        Public Event tblimagesRowDeleted As tblimagesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblimagesRow(ByVal row As tblimagesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblimagesRow(ByVal description As String, ByVal Trno As String, ByVal trimage() As Byte) As tblimagesRow
            Dim rowtblimagesRow As tblimagesRow = CType(Me.NewRow,tblimagesRow)
            Dim columnValuesArray() As Object = New Object() {description, Trno, trimage}
            rowtblimagesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblimagesRow)
            Return rowtblimagesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblimagesDataTable = CType(MyBase.Clone,tblimagesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblimagesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columndescription = MyBase.Columns("description")
            Me.columnTrno = MyBase.Columns("Trno")
            Me.columntrimage = MyBase.Columns("trimage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnTrno = New Global.System.Data.DataColumn("Trno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrno)
            Me.columntrimage = New Global.System.Data.DataColumn("trimage", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrimage)
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 45
            Me.columnTrno.AllowDBNull = false
            Me.columnTrno.MaxLength = 45
            Me.columntrimage.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblimagesRow() As tblimagesRow
            Return CType(Me.NewRow,tblimagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblimagesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblimagesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblimagesRowChangedEvent) Is Nothing) Then
                RaiseEvent tblimagesRowChanged(Me, New tblimagesRowChangeEvent(CType(e.Row,tblimagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblimagesRowChangingEvent) Is Nothing) Then
                RaiseEvent tblimagesRowChanging(Me, New tblimagesRowChangeEvent(CType(e.Row,tblimagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblimagesRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblimagesRowDeleted(Me, New tblimagesRowChangeEvent(CType(e.Row,tblimagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblimagesRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblimagesRowDeleting(Me, New tblimagesRowChangeEvent(CType(e.Row,tblimagesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblimagesRow(ByVal row As tblimagesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblimagesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tbldrreportDataTable
        Inherits Global.System.Data.TypedTableBase(Of tbldrreportRow)
        
        Private columntrno As Global.System.Data.DataColumn
        
        Private columnprno As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnexpdate As Global.System.Data.DataColumn
        
        Private columnlnbn As Global.System.Data.DataColumn
        
        Private columndrno As Global.System.Data.DataColumn
        
        Private columndrdate As Global.System.Data.DataColumn
        
        Private columnsoldto As Global.System.Data.DataColumn
        
        Private columnaddress As Global.System.Data.DataColumn
        
        Private columnpono As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnprodcode As Global.System.Data.DataColumn
        
        Private columncpr As Global.System.Data.DataColumn
        
        Private columnunitprice As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tbldrreport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lnbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlnbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property drnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property drdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndrdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soldtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoldto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ponoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prodcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprodcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitpriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tbldrreportRow
            Get
                Return CType(Me.Rows(index),tbldrreportRow)
            End Get
        End Property
        
        Public Event tbldrreportRowChanging As tbldrreportRowChangeEventHandler
        
        Public Event tbldrreportRowChanged As tbldrreportRowChangeEventHandler
        
        Public Event tbldrreportRowDeleting As tbldrreportRowChangeEventHandler
        
        Public Event tbldrreportRowDeleted As tbldrreportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtbldrreportRow(ByVal row As tbldrreportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtbldrreportRow(ByVal trno As String, ByVal prno As String, ByVal unit As String, ByVal expdate As String, ByVal lnbn As String, ByVal drno As String, ByVal drdate As String, ByVal soldto As String, ByVal address As String, ByVal pono As String, ByVal qty As String, ByVal description As String, ByVal prodcode As String, ByVal cpr As String, ByVal unitprice As String) As tbldrreportRow
            Dim rowtbldrreportRow As tbldrreportRow = CType(Me.NewRow,tbldrreportRow)
            Dim columnValuesArray() As Object = New Object() {trno, prno, unit, expdate, lnbn, drno, drdate, soldto, address, pono, qty, description, prodcode, cpr, unitprice}
            rowtbldrreportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtbldrreportRow)
            Return rowtbldrreportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tbldrreportDataTable = CType(MyBase.Clone,tbldrreportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tbldrreportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columntrno = MyBase.Columns("trno")
            Me.columnprno = MyBase.Columns("prno")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnexpdate = MyBase.Columns("expdate")
            Me.columnlnbn = MyBase.Columns("lnbn")
            Me.columndrno = MyBase.Columns("drno")
            Me.columndrdate = MyBase.Columns("drdate")
            Me.columnsoldto = MyBase.Columns("soldto")
            Me.columnaddress = MyBase.Columns("address")
            Me.columnpono = MyBase.Columns("pono")
            Me.columnqty = MyBase.Columns("qty")
            Me.columndescription = MyBase.Columns("description")
            Me.columnprodcode = MyBase.Columns("prodcode")
            Me.columncpr = MyBase.Columns("cpr")
            Me.columnunitprice = MyBase.Columns("unitprice")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columntrno = New Global.System.Data.DataColumn("trno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrno)
            Me.columnprno = New Global.System.Data.DataColumn("prno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprno)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnexpdate = New Global.System.Data.DataColumn("expdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpdate)
            Me.columnlnbn = New Global.System.Data.DataColumn("lnbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlnbn)
            Me.columndrno = New Global.System.Data.DataColumn("drno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndrno)
            Me.columndrdate = New Global.System.Data.DataColumn("drdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndrdate)
            Me.columnsoldto = New Global.System.Data.DataColumn("soldto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoldto)
            Me.columnaddress = New Global.System.Data.DataColumn("address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress)
            Me.columnpono = New Global.System.Data.DataColumn("pono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpono)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnprodcode = New Global.System.Data.DataColumn("prodcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprodcode)
            Me.columncpr = New Global.System.Data.DataColumn("cpr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpr)
            Me.columnunitprice = New Global.System.Data.DataColumn("unitprice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitprice)
            Me.columntrno.AllowDBNull = false
            Me.columntrno.MaxLength = 45
            Me.columnprno.AllowDBNull = false
            Me.columnprno.MaxLength = 45
            Me.columnunit.AllowDBNull = false
            Me.columnunit.MaxLength = 45
            Me.columnexpdate.AllowDBNull = false
            Me.columnexpdate.MaxLength = 45
            Me.columnlnbn.AllowDBNull = false
            Me.columnlnbn.MaxLength = 45
            Me.columndrno.AllowDBNull = false
            Me.columndrno.MaxLength = 45
            Me.columndrdate.AllowDBNull = false
            Me.columndrdate.MaxLength = 45
            Me.columnsoldto.AllowDBNull = false
            Me.columnsoldto.MaxLength = 45
            Me.columnaddress.AllowDBNull = false
            Me.columnaddress.MaxLength = 45
            Me.columnpono.AllowDBNull = false
            Me.columnpono.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnqty.MaxLength = 45
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 45
            Me.columnprodcode.AllowDBNull = false
            Me.columnprodcode.MaxLength = 45
            Me.columncpr.AllowDBNull = false
            Me.columncpr.MaxLength = 45
            Me.columnunitprice.AllowDBNull = false
            Me.columnunitprice.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtbldrreportRow() As tbldrreportRow
            Return CType(Me.NewRow,tbldrreportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tbldrreportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tbldrreportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tbldrreportRowChangedEvent) Is Nothing) Then
                RaiseEvent tbldrreportRowChanged(Me, New tbldrreportRowChangeEvent(CType(e.Row,tbldrreportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tbldrreportRowChangingEvent) Is Nothing) Then
                RaiseEvent tbldrreportRowChanging(Me, New tbldrreportRowChangeEvent(CType(e.Row,tbldrreportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tbldrreportRowDeletedEvent) Is Nothing) Then
                RaiseEvent tbldrreportRowDeleted(Me, New tbldrreportRowChangeEvent(CType(e.Row,tbldrreportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tbldrreportRowDeletingEvent) Is Nothing) Then
                RaiseEvent tbldrreportRowDeleting(Me, New tbldrreportRowChangeEvent(CType(e.Row,tbldrreportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetbldrreportRow(ByVal row As tbldrreportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tbldrreportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tblchargenewDataTable
        Inherits Global.System.Data.TypedTableBase(Of tblchargenewRow)
        
        Private columnsoldto As Global.System.Data.DataColumn
        
        Private columnprno As Global.System.Data.DataColumn
        
        Private columnaddress As Global.System.Data.DataColumn
        
        Private columntrno As Global.System.Data.DataColumn
        
        Private columnpono As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columndrdate As Global.System.Data.DataColumn
        
        Private columndrno As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnunit As Global.System.Data.DataColumn
        
        Private columnprodcode As Global.System.Data.DataColumn
        
        Private columncpr As Global.System.Data.DataColumn
        
        Private columnlnbn As Global.System.Data.DataColumn
        
        Private columnexpdate As Global.System.Data.DataColumn
        
        Private columnunitprice As Global.System.Data.DataColumn
        
        Private columnprepby As Global.System.Data.DataColumn
        
        Private columnappby As Global.System.Data.DataColumn
        
        Private columncino As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tblchargenew"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property soldtoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsoldto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property addressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property trnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ponoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property drdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndrdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property drnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndrno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prodcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprodcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cprColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncpr
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lnbnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlnbn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property expdateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnexpdate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unitpriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunitprice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property prepbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprepby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property appbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnappby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tblchargenewRow
            Get
                Return CType(Me.Rows(index),tblchargenewRow)
            End Get
        End Property
        
        Public Event tblchargenewRowChanging As tblchargenewRowChangeEventHandler
        
        Public Event tblchargenewRowChanged As tblchargenewRowChangeEventHandler
        
        Public Event tblchargenewRowDeleting As tblchargenewRowChangeEventHandler
        
        Public Event tblchargenewRowDeleted As tblchargenewRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddtblchargenewRow(ByVal row As tblchargenewRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddtblchargenewRow( _
                    ByVal soldto As String,  _
                    ByVal prno As String,  _
                    ByVal address As String,  _
                    ByVal trno As String,  _
                    ByVal pono As String,  _
                    ByVal qty As String,  _
                    ByVal drdate As String,  _
                    ByVal drno As String,  _
                    ByVal description As String,  _
                    ByVal unit As String,  _
                    ByVal prodcode As String,  _
                    ByVal cpr As String,  _
                    ByVal lnbn As String,  _
                    ByVal expdate As String,  _
                    ByVal unitprice As String,  _
                    ByVal prepby As String,  _
                    ByVal appby As String,  _
                    ByVal cino As String) As tblchargenewRow
            Dim rowtblchargenewRow As tblchargenewRow = CType(Me.NewRow,tblchargenewRow)
            Dim columnValuesArray() As Object = New Object() {soldto, prno, address, trno, pono, qty, drdate, drno, description, unit, prodcode, cpr, lnbn, expdate, unitprice, prepby, appby, cino}
            rowtblchargenewRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtblchargenewRow)
            Return rowtblchargenewRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tblchargenewDataTable = CType(MyBase.Clone,tblchargenewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tblchargenewDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnsoldto = MyBase.Columns("soldto")
            Me.columnprno = MyBase.Columns("prno")
            Me.columnaddress = MyBase.Columns("address")
            Me.columntrno = MyBase.Columns("trno")
            Me.columnpono = MyBase.Columns("pono")
            Me.columnqty = MyBase.Columns("qty")
            Me.columndrdate = MyBase.Columns("drdate")
            Me.columndrno = MyBase.Columns("drno")
            Me.columndescription = MyBase.Columns("description")
            Me.columnunit = MyBase.Columns("unit")
            Me.columnprodcode = MyBase.Columns("prodcode")
            Me.columncpr = MyBase.Columns("cpr")
            Me.columnlnbn = MyBase.Columns("lnbn")
            Me.columnexpdate = MyBase.Columns("expdate")
            Me.columnunitprice = MyBase.Columns("unitprice")
            Me.columnprepby = MyBase.Columns("prepby")
            Me.columnappby = MyBase.Columns("appby")
            Me.columncino = MyBase.Columns("cino")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnsoldto = New Global.System.Data.DataColumn("soldto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsoldto)
            Me.columnprno = New Global.System.Data.DataColumn("prno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprno)
            Me.columnaddress = New Global.System.Data.DataColumn("address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnaddress)
            Me.columntrno = New Global.System.Data.DataColumn("trno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntrno)
            Me.columnpono = New Global.System.Data.DataColumn("pono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpono)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columndrdate = New Global.System.Data.DataColumn("drdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndrdate)
            Me.columndrno = New Global.System.Data.DataColumn("drno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndrno)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnunit = New Global.System.Data.DataColumn("unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunit)
            Me.columnprodcode = New Global.System.Data.DataColumn("prodcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprodcode)
            Me.columncpr = New Global.System.Data.DataColumn("cpr", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncpr)
            Me.columnlnbn = New Global.System.Data.DataColumn("lnbn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlnbn)
            Me.columnexpdate = New Global.System.Data.DataColumn("expdate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnexpdate)
            Me.columnunitprice = New Global.System.Data.DataColumn("unitprice", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunitprice)
            Me.columnprepby = New Global.System.Data.DataColumn("prepby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprepby)
            Me.columnappby = New Global.System.Data.DataColumn("appby", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnappby)
            Me.columncino = New Global.System.Data.DataColumn("cino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncino)
            Me.columnsoldto.AllowDBNull = false
            Me.columnsoldto.MaxLength = 45
            Me.columnprno.AllowDBNull = false
            Me.columnprno.MaxLength = 45
            Me.columnaddress.AllowDBNull = false
            Me.columnaddress.MaxLength = 45
            Me.columntrno.AllowDBNull = false
            Me.columntrno.MaxLength = 45
            Me.columnpono.AllowDBNull = false
            Me.columnpono.MaxLength = 45
            Me.columnqty.AllowDBNull = false
            Me.columnqty.MaxLength = 45
            Me.columndrdate.AllowDBNull = false
            Me.columndrdate.MaxLength = 45
            Me.columndrno.AllowDBNull = false
            Me.columndrno.MaxLength = 45
            Me.columndescription.AllowDBNull = false
            Me.columndescription.MaxLength = 45
            Me.columnunit.AllowDBNull = false
            Me.columnunit.MaxLength = 45
            Me.columnprodcode.AllowDBNull = false
            Me.columnprodcode.MaxLength = 45
            Me.columncpr.AllowDBNull = false
            Me.columncpr.MaxLength = 45
            Me.columnlnbn.AllowDBNull = false
            Me.columnlnbn.MaxLength = 45
            Me.columnexpdate.AllowDBNull = false
            Me.columnexpdate.MaxLength = 45
            Me.columnunitprice.AllowDBNull = false
            Me.columnunitprice.MaxLength = 45
            Me.columnprepby.AllowDBNull = false
            Me.columnprepby.MaxLength = 45
            Me.columnappby.AllowDBNull = false
            Me.columnappby.MaxLength = 45
            Me.columncino.AllowDBNull = false
            Me.columncino.MaxLength = 45
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewtblchargenewRow() As tblchargenewRow
            Return CType(Me.NewRow,tblchargenewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tblchargenewRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tblchargenewRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tblchargenewRowChangedEvent) Is Nothing) Then
                RaiseEvent tblchargenewRowChanged(Me, New tblchargenewRowChangeEvent(CType(e.Row,tblchargenewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tblchargenewRowChangingEvent) Is Nothing) Then
                RaiseEvent tblchargenewRowChanging(Me, New tblchargenewRowChangeEvent(CType(e.Row,tblchargenewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tblchargenewRowDeletedEvent) Is Nothing) Then
                RaiseEvent tblchargenewRowDeleted(Me, New tblchargenewRowChangeEvent(CType(e.Row,tblchargenewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tblchargenewRowDeletingEvent) Is Nothing) Then
                RaiseEvent tblchargenewRowDeleting(Me, New tblchargenewRowChangeEvent(CType(e.Row,tblchargenewRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovetblchargenewRow(ByVal row As tblchargenewRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tblchargenewDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblrecievedRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblrecieved As tblrecievedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblrecieved = CType(Me.Table,tblrecievedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pono() As String
            Get
                Return CType(Me(Me.tabletblrecieved.ponoColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.ponoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletblrecieved.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suppname() As String
            Get
                Return CType(Me(Me.tabletblrecieved.suppnameColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.suppnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property salesperson() As String
            Get
                Return CType(Me(Me.tabletblrecieved.salespersonColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.salespersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address() As String
            Get
                Return CType(Me(Me.tabletblrecieved.addressColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contactno() As String
            Get
                Return CType(Me(Me.tabletblrecieved.contactnoColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.contactnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property forwader() As String
            Get
                Return CType(Me(Me.tabletblrecieved.forwaderColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.forwaderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fcontact() As String
            Get
                Return CType(Me(Me.tabletblrecieved.fcontactColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.fcontactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property remarks() As String
            Get
                Return CType(Me(Me.tabletblrecieved.remarksColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.remarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itmdesc() As String
            Get
                Return CType(Me(Me.tabletblrecieved.itmdescColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.itmdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cost() As String
            Get
                Return CType(Me(Me.tabletblrecieved.costColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.costColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As String
            Get
                Return CType(Me(Me.tabletblrecieved.qtyColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Return CType(Me(Me.tabletblrecieved.unitColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property size() As String
            Get
                Return CType(Me(Me.tabletblrecieved.sizeColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.sizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expdate() As String
            Get
                Return CType(Me(Me.tabletblrecieved.expdateColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.expdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lotnumber() As String
            Get
                Return CType(Me(Me.tabletblrecieved.lotnumberColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.lotnumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property status() As String
            Get
                Return CType(Me(Me.tabletblrecieved.statusColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.statusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property suppno() As String
            Get
                Return CType(Me(Me.tabletblrecieved.suppnoColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.suppnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tabletblrecieved.prepbyColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tabletblrecieved.appbyColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property recno() As String
            Get
                Return CType(Me(Me.tabletblrecieved.recnoColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.recnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property recprep() As String
            Get
                Return CType(Me(Me.tabletblrecieved.recprepColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.recprepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property recchek() As String
            Get
                Return CType(Me(Me.tabletblrecieved.recchekColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.recchekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rdate() As String
            Get
                Return CType(Me(Me.tabletblrecieved.rdateColumn),String)
            End Get
            Set
                Me(Me.tabletblrecieved.rdateColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tbldelieveryRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbldelievery As tbldelieveryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbldelievery = CType(Me.Table,tbldelieveryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletbldelievery.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custname() As String
            Get
                Return CType(Me(Me.tabletbldelievery.custnameColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.custnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custaddress() As String
            Get
                Return CType(Me(Me.tabletbldelievery.custaddressColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.custaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property delNo() As String
            Get
                Return CType(Me(Me.tabletbldelievery.delNoColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.delNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tabletbldelievery.prepbyColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tabletbldelievery.appbyColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Return CType(Me(Me.tabletbldelievery.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemdesc() As String
            Get
                Return CType(Me(Me.tabletbldelievery.itemdescColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.itemdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Double
            Get
                Return CType(Me(Me.tabletbldelievery.qtyColumn),Double)
            End Get
            Set
                Me(Me.tabletbldelievery.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uprice() As Double
            Get
                Return CType(Me(Me.tabletbldelievery.upriceColumn),Double)
            End Get
            Set
                Me(Me.tabletbldelievery.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Double
            Get
                Return CType(Me(Me.tabletbldelievery.amountColumn),Double)
            End Get
            Set
                Me(Me.tabletbldelievery.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picktype() As String
            Get
                Return CType(Me(Me.tabletbldelievery.picktypeColumn),String)
            End Get
            Set
                Me(Me.tabletbldelievery.picktypeColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblpurchaseRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblpurchase As tblpurchaseDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblpurchase = CType(Me.Table,tblpurchaseDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ptype() As String
            Get
                Return CType(Me(Me.tabletblpurchase.PtypeColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.PtypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletblpurchase.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custname() As String
            Get
                Return CType(Me(Me.tabletblpurchase.custnameColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.custnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custaddress() As String
            Get
                Return CType(Me(Me.tabletblpurchase.custaddressColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.custaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property delNo() As String
            Get
                Return CType(Me(Me.tabletblpurchase.delNoColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.delNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tabletblpurchase.prepbyColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tabletblpurchase.appbyColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Return CType(Me(Me.tabletblpurchase.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemdesc() As String
            Get
                Return CType(Me(Me.tabletblpurchase.itemdescColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.itemdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Double
            Get
                Return CType(Me(Me.tabletblpurchase.qtyColumn),Double)
            End Get
            Set
                Me(Me.tabletblpurchase.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uprice() As Double
            Get
                Return CType(Me(Me.tabletblpurchase.upriceColumn),Double)
            End Get
            Set
                Me(Me.tabletblpurchase.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amount() As Double
            Get
                Return CType(Me(Me.tabletblpurchase.amountColumn),Double)
            End Get
            Set
                Me(Me.tabletblpurchase.amountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picktype() As String
            Get
                Return CType(Me(Me.tabletblpurchase.picktypeColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.picktypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property payment() As Double
            Get
                Return CType(Me(Me.tabletblpurchase.paymentColumn),Double)
            End Get
            Set
                Me(Me.tabletblpurchase.paymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tcost() As Double
            Get
                Return CType(Me(Me.tabletblpurchase.tcostColumn),Double)
            End Get
            Set
                Me(Me.tabletblpurchase.tcostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Return CType(Me(Me.tabletblpurchase.unitColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tsize() As String
            Get
                Return CType(Me(Me.tabletblpurchase.tsizeColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.tsizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lnbn() As String
            Get
                Return CType(Me(Me.tabletblpurchase.lnbnColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.lnbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expdate() As String
            Get
                Return CType(Me(Me.tabletblpurchase.expdateColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.expdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pr() As String
            Get
                Return CType(Me(Me.tabletblpurchase.prColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.prColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tr() As String
            Get
                Return CType(Me(Me.tabletblpurchase.trColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.trColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property brefdesc() As String
            Get
                Return CType(Me(Me.tabletblpurchase.brefdescColumn),String)
            End Get
            Set
                Me(Me.tabletblpurchase.brefdescColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CollectionRow
        Inherits Global.System.Data.DataRow
        
        Private tableCollection As CollectionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCollection = CType(Me.Table,CollectionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tableCollection.tdateColumn),String)
            End Get
            Set
                Me(Me.tableCollection.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custname() As String
            Get
                Return CType(Me(Me.tableCollection.custnameColumn),String)
            End Get
            Set
                Me(Me.tableCollection.custnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custaddress() As String
            Get
                Return CType(Me(Me.tableCollection.custaddressColumn),String)
            End Get
            Set
                Me(Me.tableCollection.custaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property delNo() As String
            Get
                Return CType(Me(Me.tableCollection.delNoColumn),String)
            End Get
            Set
                Me(Me.tableCollection.delNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tableCollection.prepbyColumn),String)
            End Get
            Set
                Me(Me.tableCollection.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tableCollection.appbyColumn),String)
            End Get
            Set
                Me(Me.tableCollection.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Return CType(Me(Me.tableCollection.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tableCollection.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemdesc() As String
            Get
                Return CType(Me(Me.tableCollection.itemdescColumn),String)
            End Get
            Set
                Me(Me.tableCollection.itemdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Double
            Get
                Return CType(Me(Me.tableCollection.qtyColumn),Double)
            End Get
            Set
                Me(Me.tableCollection.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uprice() As Double
            Get
                Return CType(Me(Me.tableCollection.upriceColumn),Double)
            End Get
            Set
                Me(Me.tableCollection.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picktype() As String
            Get
                Return CType(Me(Me.tableCollection.picktypeColumn),String)
            End Get
            Set
                Me(Me.tableCollection.picktypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tcost() As Double
            Get
                Return CType(Me(Me.tableCollection.tcostColumn),Double)
            End Get
            Set
                Me(Me.tableCollection.tcostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datecol() As String
            Get
                Return CType(Me(Me.tableCollection.datecolColumn),String)
            End Get
            Set
                Me(Me.tableCollection.datecolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clientno() As String
            Get
                Return CType(Me(Me.tableCollection.clientnoColumn),String)
            End Get
            Set
                Me(Me.tableCollection.clientnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property collectionno() As String
            Get
                Return CType(Me(Me.tableCollection.collectionnoColumn),String)
            End Get
            Set
                Me(Me.tableCollection.collectionnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _sum_amount_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCollection._sum_amount_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum(amount)' in table 'Collection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCollection._sum_amount_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _sum_payment_() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCollection._sum_payment_Column),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sum(payment)' in table 'Collection' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCollection._sum_payment_Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_sum_amount_Null() As Boolean
            Return Me.IsNull(Me.tableCollection._sum_amount_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_sum_amount_Null()
            Me(Me.tableCollection._sum_amount_Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_sum_payment_Null() As Boolean
            Return Me.IsNull(Me.tableCollection._sum_payment_Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_sum_payment_Null()
            Me(Me.tableCollection._sum_payment_Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblrecievablesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblrecievables As tblrecievablesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblrecievables = CType(Me.Table,tblrecievablesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletblrecievables.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custname() As String
            Get
                Return CType(Me(Me.tabletblrecievables.custnameColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.custnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custaddress() As String
            Get
                Return CType(Me(Me.tabletblrecievables.custaddressColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.custaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property delNo() As String
            Get
                Return CType(Me(Me.tabletblrecievables.delNoColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.delNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tabletblrecievables.prepbyColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tabletblrecievables.appbyColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Return CType(Me(Me.tabletblrecievables.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemdesc() As String
            Get
                Return CType(Me(Me.tabletblrecievables.itemdescColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.itemdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Double
            Get
                Return CType(Me(Me.tabletblrecievables.qtyColumn),Double)
            End Get
            Set
                Me(Me.tabletblrecievables.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uprice() As Double
            Get
                Return CType(Me(Me.tabletblrecievables.upriceColumn),Double)
            End Get
            Set
                Me(Me.tabletblrecievables.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picktype() As String
            Get
                Return CType(Me(Me.tabletblrecievables.picktypeColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.picktypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tcost() As Double
            Get
                Return CType(Me(Me.tabletblrecievables.tcostColumn),Double)
            End Get
            Set
                Me(Me.tabletblrecievables.tcostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property payment() As Double
            Get
                Return CType(Me(Me.tabletblrecievables.paymentColumn),Double)
            End Get
            Set
                Me(Me.tabletblrecievables.paymentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property totalall() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblrecievables.totalallColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'totalall' in table 'tblrecievables' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblrecievables.totalallColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clientno() As String
            Get
                Return CType(Me(Me.tabletblrecievables.clientnoColumn),String)
            End Get
            Set
                Me(Me.tabletblrecievables.clientnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalallNull() As Boolean
            Return Me.IsNull(Me.tabletblrecievables.totalallColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalallNull()
            Me(Me.tabletblrecievables.totalallColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblstatementRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblstatement As tblstatementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblstatement = CType(Me.Table,tblstatementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ptype() As String
            Get
                Return CType(Me(Me.tabletblstatement.PtypeColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.PtypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PStatus() As String
            Get
                Return CType(Me(Me.tabletblstatement.PStatusColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.PStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletblstatement.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custname() As String
            Get
                Return CType(Me(Me.tabletblstatement.custnameColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.custnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custaddress() As String
            Get
                Return CType(Me(Me.tabletblstatement.custaddressColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.custaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property delNo() As String
            Get
                Return CType(Me(Me.tabletblstatement.delNoColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.delNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tabletblstatement.prepbyColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tabletblstatement.appbyColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Return CType(Me(Me.tabletblstatement.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemdesc() As String
            Get
                Return CType(Me(Me.tabletblstatement.itemdescColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.itemdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Double
            Get
                Return CType(Me(Me.tabletblstatement.qtyColumn),Double)
            End Get
            Set
                Me(Me.tabletblstatement.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uprice() As Double
            Get
                Return CType(Me(Me.tabletblstatement.upriceColumn),Double)
            End Get
            Set
                Me(Me.tabletblstatement.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picktype() As String
            Get
                Return CType(Me(Me.tabletblstatement.picktypeColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.picktypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tcost() As Double
            Get
                Return CType(Me(Me.tabletblstatement.tcostColumn),Double)
            End Get
            Set
                Me(Me.tabletblstatement.tcostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clientno() As String
            Get
                Return CType(Me(Me.tabletblstatement.clientnoColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.clientnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datecol() As String
            Get
                Return CType(Me(Me.tabletblstatement.datecolColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.datecolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amnt() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblstatement.amntColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amnt' in table 'tblstatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblstatement.amntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pmnt() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblstatement.pmntColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pmnt' in table 'tblstatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblstatement.pmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property collectionno() As String
            Get
                Return CType(Me(Me.tabletblstatement.collectionnoColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.collectionnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chkno() As String
            Get
                Return CType(Me(Me.tabletblstatement.chknoColumn),String)
            End Get
            Set
                Me(Me.tabletblstatement.chknoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashrecieved() As Double
            Get
                Return CType(Me(Me.tabletblstatement.cashrecievedColumn),Double)
            End Get
            Set
                Me(Me.tabletblstatement.cashrecievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamntNull() As Boolean
            Return Me.IsNull(Me.tabletblstatement.amntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamntNull()
            Me(Me.tabletblstatement.amntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspmntNull() As Boolean
            Return Me.IsNull(Me.tabletblstatement.pmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpmntNull()
            Me(Me.tabletblstatement.pmntColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblcollectedRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblcollected As tblcollectedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblcollected = CType(Me.Table,tblcollectedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ptype() As String
            Get
                Return CType(Me(Me.tabletblcollected.PtypeColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.PtypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PStatus() As String
            Get
                Return CType(Me(Me.tabletblcollected.PStatusColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.PStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletblcollected.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custname() As String
            Get
                Return CType(Me(Me.tabletblcollected.custnameColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.custnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custaddress() As String
            Get
                Return CType(Me(Me.tabletblcollected.custaddressColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.custaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property delNo() As String
            Get
                Return CType(Me(Me.tabletblcollected.delNoColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.delNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tabletblcollected.prepbyColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tabletblcollected.appbyColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Return CType(Me(Me.tabletblcollected.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemdesc() As String
            Get
                Return CType(Me(Me.tabletblcollected.itemdescColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.itemdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Double
            Get
                Return CType(Me(Me.tabletblcollected.qtyColumn),Double)
            End Get
            Set
                Me(Me.tabletblcollected.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uprice() As Double
            Get
                Return CType(Me(Me.tabletblcollected.upriceColumn),Double)
            End Get
            Set
                Me(Me.tabletblcollected.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amnt() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblcollected.amntColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amnt' in table 'tblcollected' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblcollected.amntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picktype() As String
            Get
                Return CType(Me(Me.tabletblcollected.picktypeColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.picktypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pmnt() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblcollected.pmntColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pmnt' in table 'tblcollected' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblcollected.pmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tcost() As Double
            Get
                Return CType(Me(Me.tabletblcollected.tcostColumn),Double)
            End Get
            Set
                Me(Me.tabletblcollected.tcostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clientno() As String
            Get
                Return CType(Me(Me.tabletblcollected.clientnoColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.clientnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datecol() As String
            Get
                Return CType(Me(Me.tabletblcollected.datecolColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.datecolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property collectionno() As String
            Get
                Return CType(Me(Me.tabletblcollected.collectionnoColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.collectionnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chkno() As String
            Get
                Return CType(Me(Me.tabletblcollected.chknoColumn),String)
            End Get
            Set
                Me(Me.tabletblcollected.chknoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashrecieved() As Double
            Get
                Return CType(Me(Me.tabletblcollected.cashrecievedColumn),Double)
            End Get
            Set
                Me(Me.tabletblcollected.cashrecievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamntNull() As Boolean
            Return Me.IsNull(Me.tabletblcollected.amntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamntNull()
            Me(Me.tabletblcollected.amntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspmntNull() As Boolean
            Return Me.IsNull(Me.tabletblcollected.pmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpmntNull()
            Me(Me.tabletblcollected.pmntColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblallstatementRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblallstatement As tblallstatementDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblallstatement = CType(Me.Table,tblallstatementDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ptype() As String
            Get
                Return CType(Me(Me.tabletblallstatement.PtypeColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.PtypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PStatus() As String
            Get
                Return CType(Me(Me.tabletblallstatement.PStatusColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.PStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tdate() As String
            Get
                Return CType(Me(Me.tabletblallstatement.tdateColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.tdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custname() As String
            Get
                Return CType(Me(Me.tabletblallstatement.custnameColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.custnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property custaddress() As String
            Get
                Return CType(Me(Me.tabletblallstatement.custaddressColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.custaddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property delNo() As String
            Get
                Return CType(Me(Me.tabletblallstatement.delNoColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.delNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tabletblallstatement.prepbyColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tabletblallstatement.appbyColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemcode() As String
            Get
                Return CType(Me(Me.tabletblallstatement.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.itemcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property itemdesc() As String
            Get
                Return CType(Me(Me.tabletblallstatement.itemdescColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.itemdescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As Double
            Get
                Return CType(Me(Me.tabletblallstatement.qtyColumn),Double)
            End Get
            Set
                Me(Me.tabletblallstatement.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property uprice() As Double
            Get
                Return CType(Me(Me.tabletblallstatement.upriceColumn),Double)
            End Get
            Set
                Me(Me.tabletblallstatement.upriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property amnt() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblallstatement.amntColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'amnt' in table 'tblallstatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblallstatement.amntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property picktype() As String
            Get
                Return CType(Me(Me.tabletblallstatement.picktypeColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.picktypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pmnt() As Double
            Get
                Try 
                    Return CType(Me(Me.tabletblallstatement.pmntColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'pmnt' in table 'tblallstatement' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletblallstatement.pmntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tcost() As Double
            Get
                Return CType(Me(Me.tabletblallstatement.tcostColumn),Double)
            End Get
            Set
                Me(Me.tabletblallstatement.tcostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clientno() As String
            Get
                Return CType(Me(Me.tabletblallstatement.clientnoColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.clientnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property datecol() As String
            Get
                Return CType(Me(Me.tabletblallstatement.datecolColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.datecolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property collectionno() As String
            Get
                Return CType(Me(Me.tabletblallstatement.collectionnoColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.collectionnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property chkno() As String
            Get
                Return CType(Me(Me.tabletblallstatement.chknoColumn),String)
            End Get
            Set
                Me(Me.tabletblallstatement.chknoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cashrecieved() As Double
            Get
                Return CType(Me(Me.tabletblallstatement.cashrecievedColumn),Double)
            End Get
            Set
                Me(Me.tabletblallstatement.cashrecievedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsamntNull() As Boolean
            Return Me.IsNull(Me.tabletblallstatement.amntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetamntNull()
            Me(Me.tabletblallstatement.amntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspmntNull() As Boolean
            Return Me.IsNull(Me.tabletblallstatement.pmntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpmntNull()
            Me(Me.tabletblallstatement.pmntColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblimagesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblimages As tblimagesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblimages = CType(Me.Table,tblimagesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tabletblimages.descriptionColumn),String)
            End Get
            Set
                Me(Me.tabletblimages.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trno() As String
            Get
                Return CType(Me(Me.tabletblimages.TrnoColumn),String)
            End Get
            Set
                Me(Me.tabletblimages.TrnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trimage() As Byte()
            Get
                Return CType(Me(Me.tabletblimages.trimageColumn),Byte())
            End Get
            Set
                Me(Me.tabletblimages.trimageColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tbldrreportRow
        Inherits Global.System.Data.DataRow
        
        Private tabletbldrreport As tbldrreportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletbldrreport = CType(Me.Table,tbldrreportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trno() As String
            Get
                Return CType(Me(Me.tabletbldrreport.trnoColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.trnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prno() As String
            Get
                Return CType(Me(Me.tabletbldrreport.prnoColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.prnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Return CType(Me(Me.tabletbldrreport.unitColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expdate() As String
            Get
                Return CType(Me(Me.tabletbldrreport.expdateColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.expdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lnbn() As String
            Get
                Return CType(Me(Me.tabletbldrreport.lnbnColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.lnbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property drno() As String
            Get
                Return CType(Me(Me.tabletbldrreport.drnoColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.drnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property drdate() As String
            Get
                Return CType(Me(Me.tabletbldrreport.drdateColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.drdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soldto() As String
            Get
                Return CType(Me(Me.tabletbldrreport.soldtoColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.soldtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address() As String
            Get
                Return CType(Me(Me.tabletbldrreport.addressColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pono() As String
            Get
                Return CType(Me(Me.tabletbldrreport.ponoColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.ponoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As String
            Get
                Return CType(Me(Me.tabletbldrreport.qtyColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tabletbldrreport.descriptionColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prodcode() As String
            Get
                Return CType(Me(Me.tabletbldrreport.prodcodeColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.prodcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cpr() As String
            Get
                Return CType(Me(Me.tabletbldrreport.cprColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.cprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitprice() As String
            Get
                Return CType(Me(Me.tabletbldrreport.unitpriceColumn),String)
            End Get
            Set
                Me(Me.tabletbldrreport.unitpriceColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class tblchargenewRow
        Inherits Global.System.Data.DataRow
        
        Private tabletblchargenew As tblchargenewDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletblchargenew = CType(Me.Table,tblchargenewDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property soldto() As String
            Get
                Return CType(Me(Me.tabletblchargenew.soldtoColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.soldtoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prno() As String
            Get
                Return CType(Me(Me.tabletblchargenew.prnoColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.prnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property address() As String
            Get
                Return CType(Me(Me.tabletblchargenew.addressColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.addressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property trno() As String
            Get
                Return CType(Me(Me.tabletblchargenew.trnoColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.trnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pono() As String
            Get
                Return CType(Me(Me.tabletblchargenew.ponoColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.ponoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property qty() As String
            Get
                Return CType(Me(Me.tabletblchargenew.qtyColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property drdate() As String
            Get
                Return CType(Me(Me.tabletblchargenew.drdateColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.drdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property drno() As String
            Get
                Return CType(Me(Me.tabletblchargenew.drnoColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.drnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property description() As String
            Get
                Return CType(Me(Me.tabletblchargenew.descriptionColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unit() As String
            Get
                Return CType(Me(Me.tabletblchargenew.unitColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.unitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prodcode() As String
            Get
                Return CType(Me(Me.tabletblchargenew.prodcodeColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.prodcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cpr() As String
            Get
                Return CType(Me(Me.tabletblchargenew.cprColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.cprColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lnbn() As String
            Get
                Return CType(Me(Me.tabletblchargenew.lnbnColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.lnbnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property expdate() As String
            Get
                Return CType(Me(Me.tabletblchargenew.expdateColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.expdateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unitprice() As String
            Get
                Return CType(Me(Me.tabletblchargenew.unitpriceColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.unitpriceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property prepby() As String
            Get
                Return CType(Me(Me.tabletblchargenew.prepbyColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.prepbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property appby() As String
            Get
                Return CType(Me(Me.tabletblchargenew.appbyColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.appbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cino() As String
            Get
                Return CType(Me(Me.tabletblchargenew.cinoColumn),String)
            End Get
            Set
                Me(Me.tabletblchargenew.cinoColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblrecievedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblrecievedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblrecievedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblrecievedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tbldelieveryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbldelieveryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tbldelieveryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tbldelieveryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblpurchaseRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblpurchaseRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblpurchaseRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblpurchaseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CollectionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CollectionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CollectionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CollectionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblrecievablesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblrecievablesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblrecievablesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblrecievablesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblstatementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblstatementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblstatementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblstatementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblcollectedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblcollectedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblcollectedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblcollectedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblallstatementRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblallstatementRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblallstatementRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblallstatementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblimagesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblimagesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblimagesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblimagesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tbldrreportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tbldrreportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tbldrreportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tbldrreportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class tblchargenewRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tblchargenewRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As tblchargenewRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As tblchargenewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSet1TableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblrecievedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblrecieved"
            tableMapping.ColumnMappings.Add("pono", "pono")
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("suppname", "suppname")
            tableMapping.ColumnMappings.Add("salesperson", "salesperson")
            tableMapping.ColumnMappings.Add("address", "address")
            tableMapping.ColumnMappings.Add("contactno", "contactno")
            tableMapping.ColumnMappings.Add("forwader", "forwader")
            tableMapping.ColumnMappings.Add("fcontact", "fcontact")
            tableMapping.ColumnMappings.Add("remarks", "remarks")
            tableMapping.ColumnMappings.Add("itmdesc", "itmdesc")
            tableMapping.ColumnMappings.Add("cost", "cost")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("size", "size")
            tableMapping.ColumnMappings.Add("expdate", "expdate")
            tableMapping.ColumnMappings.Add("lotnumber", "lotnumber")
            tableMapping.ColumnMappings.Add("status", "status")
            tableMapping.ColumnMappings.Add("suppno", "suppno")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("recno", "recno")
            tableMapping.ColumnMappings.Add("recprep", "recprep")
            tableMapping.ColumnMappings.Add("recchek", "recchek")
            tableMapping.ColumnMappings.Add("rdate", "rdate")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     pono, tdate, suppname, salesperson, address, contactno, forwader, fcon"& _ 
                "tact, remarks, itmdesc, cost, qty, unit, size, expdate, lotnumber, status, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   suppno, prepby, appby, recno, recprep, recchek, rdate"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM  "& _ 
                "       tblpo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (recno = @recno)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@recno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "recno"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblrecievedDataTable, ByVal recno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (recno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("recno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(recno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal recno As String) As DataSet1.tblrecievedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (recno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("recno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(recno,String)
            End If
            Dim dataTable As DataSet1.tblrecievedDataTable = New DataSet1.tblrecievedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbldelieveryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbldelievery"
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("custname", "custname")
            tableMapping.ColumnMappings.Add("custaddress", "custaddress")
            tableMapping.ColumnMappings.Add("delNo", "delNo")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("itemdesc", "itemdesc")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("amount", "amount")
            tableMapping.ColumnMappings.Add("picktype", "picktype")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc"& _ 
                ", qty, uprice, amount, picktype"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         tbldelievery WHERE        (STR_TO_"& _ 
                "DATE(tdate, '%m/%d/%Y') BETWEEN STR_TO_DATE(@strDateFrom, '%m/%d/%Y') AND STR_TO"& _ 
                "_DATE(@strDateTo, '%m/%d/%Y')) and (Ptype = 'Cash')"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateFrom"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateTo"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tbldelieveryDataTable, ByVal strDateFrom As String, ByVal strDateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal strDateFrom As String, ByVal strDateTo As String) As DataSet1.tbldelieveryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateTo,String)
            End If
            Dim dataTable As DataSet1.tbldelieveryDataTable = New DataSet1.tbldelieveryDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblpurchaseTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblpurchase"
            tableMapping.ColumnMappings.Add("Ptype", "Ptype")
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("custname", "custname")
            tableMapping.ColumnMappings.Add("custaddress", "custaddress")
            tableMapping.ColumnMappings.Add("delNo", "delNo")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("itemdesc", "itemdesc")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("amount", "amount")
            tableMapping.ColumnMappings.Add("picktype", "picktype")
            tableMapping.ColumnMappings.Add("payment", "payment")
            tableMapping.ColumnMappings.Add("tcost", "tcost")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("tsize", "tsize")
            tableMapping.ColumnMappings.Add("lnbn", "lnbn")
            tableMapping.ColumnMappings.Add("expdate", "expdate")
            tableMapping.ColumnMappings.Add("pr", "pr")
            tableMapping.ColumnMappings.Add("tr", "tr")
            tableMapping.ColumnMappings.Add("brefdesc", "brefdesc")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        Ptype, tdate, custname, custaddress, delNo, prepby, appby, itemcode"& _ 
                ", itemdesc, qty, uprice, amount, picktype, payment, tcost, unit, tsize, lnbn, ex"& _ 
                "pdate, pr, tr, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         brefdesc"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tbldelievery"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (delNo = @delno)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@delno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "delNo"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblpurchaseDataTable, ByVal delno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (delno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("delno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(delno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal delno As String) As DataSet1.tblpurchaseDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (delno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("delno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(delno,String)
            End If
            Dim dataTable As DataSet1.tblpurchaseDataTable = New DataSet1.tblpurchaseDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CollectionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Collection"
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("custname", "custname")
            tableMapping.ColumnMappings.Add("custaddress", "custaddress")
            tableMapping.ColumnMappings.Add("delNo", "delNo")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("itemdesc", "itemdesc")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("picktype", "picktype")
            tableMapping.ColumnMappings.Add("tcost", "tcost")
            tableMapping.ColumnMappings.Add("datecol", "datecol")
            tableMapping.ColumnMappings.Add("clientno", "clientno")
            tableMapping.ColumnMappings.Add("collectionno", "collectionno")
            tableMapping.ColumnMappings.Add("sum(amount)", "sum(amount)")
            tableMapping.ColumnMappings.Add("sum(payment)", "sum(payment)")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemdesc"& _ 
                ", qty, uprice,sum(amount), picktype, tcost, sum(payment), datecol, clientno, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                     collectionno"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         tbldelievery"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (STR_TO_"& _ 
                "DATE(tdate, '%m/%d/%Y') BETWEEN STR_TO_DATE(@strDateFrom, '%m/%d/%Y') AND STR_TO"& _ 
                "_DATE(@strDateTo, '%m/%d/%Y')) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (Ptype <> 'Cash') AND"& _ 
                " (payment <> '0') AND (clientno LIKE @cno) group by delNo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateFrom"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateTo"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@cno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "clientno"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.CollectionDataTable, ByVal strDateFrom As String, ByVal strDateTo As String, ByVal cno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateTo,String)
            End If
            If (cno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cno")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(cno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal strDateFrom As String, ByVal strDateTo As String, ByVal cno As String) As DataSet1.CollectionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateTo,String)
            End If
            If (cno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cno")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(cno,String)
            End If
            Dim dataTable As DataSet1.CollectionDataTable = New DataSet1.CollectionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblrecievablesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblrecievables"
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("custname", "custname")
            tableMapping.ColumnMappings.Add("custaddress", "custaddress")
            tableMapping.ColumnMappings.Add("delNo", "delNo")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("itemdesc", "itemdesc")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("picktype", "picktype")
            tableMapping.ColumnMappings.Add("tcost", "tcost")
            tableMapping.ColumnMappings.Add("payment", "payment")
            tableMapping.ColumnMappings.Add("totalall", "totalall")
            tableMapping.ColumnMappings.Add("clientno", "clientno")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        tdate, custname, custaddress, delNo, prepby, appby, itemcode, itemd"& _ 
                "esc, qty, uprice, SUM(amount) - SUM(payment) AS totalall, picktype, tcost, payme"& _ 
                "nt, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         clientno"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tbldelievery"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE    "& _ 
                "    (STR_TO_DATE(tdate, '%m/%d/%Y') BETWEEN STR_TO_DATE(@strDateFrom, '%m/%d/%Y'"& _ 
                ") AND STR_TO_DATE(@strDateTo, '%m/%d/%Y')) AND (Ptype <> 'Cash') "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"             "& _ 
                "            AND (payment < tcost) AND (custname LIKE @cname)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY clientno "& _ 
                "order by custname asc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateFrom"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateTo"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@cname"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "custname"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblrecievablesDataTable, ByVal strDateFrom As String, ByVal strDateTo As String, ByVal cname As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateTo,String)
            End If
            If (cname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cname")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(cname,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal strDateFrom As String, ByVal strDateTo As String, ByVal cname As String) As DataSet1.tblrecievablesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateTo,String)
            End If
            If (cname Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cname")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(cname,String)
            End If
            Dim dataTable As DataSet1.tblrecievablesDataTable = New DataSet1.tblrecievablesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblstatementTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblstatement"
            tableMapping.ColumnMappings.Add("Ptype", "Ptype")
            tableMapping.ColumnMappings.Add("PStatus", "PStatus")
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("custname", "custname")
            tableMapping.ColumnMappings.Add("custaddress", "custaddress")
            tableMapping.ColumnMappings.Add("delNo", "delNo")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("itemdesc", "itemdesc")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("picktype", "picktype")
            tableMapping.ColumnMappings.Add("tcost", "tcost")
            tableMapping.ColumnMappings.Add("clientno", "clientno")
            tableMapping.ColumnMappings.Add("datecol", "datecol")
            tableMapping.ColumnMappings.Add("amnt", "amnt")
            tableMapping.ColumnMappings.Add("pmnt", "pmnt")
            tableMapping.ColumnMappings.Add("collectionno", "collectionno")
            tableMapping.ColumnMappings.Add("chkno", "chkno")
            tableMapping.ColumnMappings.Add("cashrecieved", "cashrecieved")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Ptype, PStatus, tdate, custname, custaddress, delNo, prepby, appby, it"& _ 
                "emcode, itemdesc, qty, uprice, SUM(amount) AS amnt, picktype, SUM(payment) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   AS pmnt, tcost, clientno, datecol, collectionno, chkno, cashr"& _ 
                "ecieved"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         tbldelievery"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (clientno LIKE @cno) AND (Ptype = "& _ 
                "'Charge') AND (STR_TO_DATE(tdate, '%m/%d/%Y') BETWEEN STR_TO_DATE(@strDateFrom, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      '%m/%d/%Y') AND STR_TO_DATE(@strDateTo, '%m/%d/%Y')) and"& _ 
                " (amount > payment)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY delNo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@cno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "clientno"
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateFrom"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateTo"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblstatementDataTable, ByVal cno As String, ByVal strDateFrom As String, ByVal strDateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cno,String)
            End If
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(strDateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cno As String, ByVal strDateFrom As String, ByVal strDateTo As String) As DataSet1.tblstatementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cno,String)
            End If
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(strDateTo,String)
            End If
            Dim dataTable As DataSet1.tblstatementDataTable = New DataSet1.tblstatementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblcollectedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblcollected"
            tableMapping.ColumnMappings.Add("Ptype", "Ptype")
            tableMapping.ColumnMappings.Add("PStatus", "PStatus")
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("custname", "custname")
            tableMapping.ColumnMappings.Add("custaddress", "custaddress")
            tableMapping.ColumnMappings.Add("delNo", "delNo")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("itemdesc", "itemdesc")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("amnt", "amnt")
            tableMapping.ColumnMappings.Add("picktype", "picktype")
            tableMapping.ColumnMappings.Add("pmnt", "pmnt")
            tableMapping.ColumnMappings.Add("tcost", "tcost")
            tableMapping.ColumnMappings.Add("clientno", "clientno")
            tableMapping.ColumnMappings.Add("datecol", "datecol")
            tableMapping.ColumnMappings.Add("collectionno", "collectionno")
            tableMapping.ColumnMappings.Add("chkno", "chkno")
            tableMapping.ColumnMappings.Add("cashrecieved", "cashrecieved")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Ptype, PStatus, tdate, custname, custaddress, delNo, prepby, appby, it"& _ 
                "emcode, itemdesc, qty, uprice, SUM(amount) AS amnt, picktype, SUM(payment) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   AS pmnt, tcost, clientno, datecol, collectionno, chkno, cashr"& _ 
                "ecieved"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         tbldelievery"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (clientno LIKE @cno) AND (Ptype = "& _ 
                "'Charge') AND (STR_TO_DATE(tdate, '%m/%d/%Y') BETWEEN STR_TO_DATE(@strDateFrom, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      '%m/%d/%Y') AND STR_TO_DATE(@strDateTo, '%m/%d/%Y')) and"& _ 
                " (amount <= payment)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GROUP BY delNo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@cno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "clientno"
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateFrom"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateTo"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblcollectedDataTable, ByVal cno As String, ByVal strDateFrom As String, ByVal strDateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cno,String)
            End If
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(strDateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cno As String, ByVal strDateFrom As String, ByVal strDateTo As String) As DataSet1.tblcollectedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cno,String)
            End If
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(strDateTo,String)
            End If
            Dim dataTable As DataSet1.tblcollectedDataTable = New DataSet1.tblcollectedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblallstatementTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblallstatement"
            tableMapping.ColumnMappings.Add("Ptype", "Ptype")
            tableMapping.ColumnMappings.Add("PStatus", "PStatus")
            tableMapping.ColumnMappings.Add("tdate", "tdate")
            tableMapping.ColumnMappings.Add("custname", "custname")
            tableMapping.ColumnMappings.Add("custaddress", "custaddress")
            tableMapping.ColumnMappings.Add("delNo", "delNo")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("itemcode", "itemcode")
            tableMapping.ColumnMappings.Add("itemdesc", "itemdesc")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("uprice", "uprice")
            tableMapping.ColumnMappings.Add("amnt", "amnt")
            tableMapping.ColumnMappings.Add("picktype", "picktype")
            tableMapping.ColumnMappings.Add("pmnt", "pmnt")
            tableMapping.ColumnMappings.Add("tcost", "tcost")
            tableMapping.ColumnMappings.Add("clientno", "clientno")
            tableMapping.ColumnMappings.Add("datecol", "datecol")
            tableMapping.ColumnMappings.Add("collectionno", "collectionno")
            tableMapping.ColumnMappings.Add("chkno", "chkno")
            tableMapping.ColumnMappings.Add("cashrecieved", "cashrecieved")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     Ptype, PStatus, tdate, custname, custaddress, delNo, prepby, appby, it"& _ 
                "emcode, itemdesc, qty, uprice, SUM(amount) AS amnt, picktype, SUM(payment) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   AS pmnt, tcost, clientno, datecol, collectionno, chkno, cashr"& _ 
                "ecieved"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         tbldelievery"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (clientno LIKE @cno) AND (Ptype = "& _ 
                "'Charge') AND (STR_TO_DATE(tdate, '%m/%d/%Y') BETWEEN STR_TO_DATE(@strDateFrom, "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      '%m/%d/%Y') AND STR_TO_DATE(@strDateTo, '%m/%d/%Y'))"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"GR"& _ 
                "OUP BY delNo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@cno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "clientno"
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateFrom"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@strDateTo"
            param.Size = 1024
            param.IsNullable = true
            param.SourceColumn = ""
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblallstatementDataTable, ByVal cno As String, ByVal strDateFrom As String, ByVal strDateTo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cno,String)
            End If
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(strDateTo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cno As String, ByVal strDateFrom As String, ByVal strDateTo As String) As DataSet1.tblallstatementDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cno,String)
            End If
            If (strDateFrom Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateFrom")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(strDateFrom,String)
            End If
            If (strDateTo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("strDateTo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(strDateTo,String)
            End If
            Dim dataTable As DataSet1.tblallstatementDataTable = New DataSet1.tblallstatementDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblimagesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblimages"
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("Trno", "Trno")
            tableMapping.ColumnMappings.Add("trimage", "trimage")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        description, Trno, trimage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tblimages"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where Trno ="& _ 
                " @trno"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@trno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "Trno"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblimagesDataTable, ByVal trno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal trno As String) As DataSet1.tblimagesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (trno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("trno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(trno,String)
            End If
            Dim dataTable As DataSet1.tblimagesDataTable = New DataSet1.tblimagesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tbldrreportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tbldrreport"
            tableMapping.ColumnMappings.Add("trno", "trno")
            tableMapping.ColumnMappings.Add("prno", "prno")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("expdate", "expdate")
            tableMapping.ColumnMappings.Add("lnbn", "lnbn")
            tableMapping.ColumnMappings.Add("drno", "drno")
            tableMapping.ColumnMappings.Add("drdate", "drdate")
            tableMapping.ColumnMappings.Add("soldto", "soldto")
            tableMapping.ColumnMappings.Add("address", "address")
            tableMapping.ColumnMappings.Add("pono", "pono")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("prodcode", "prodcode")
            tableMapping.ColumnMappings.Add("cpr", "cpr")
            tableMapping.ColumnMappings.Add("unitprice", "unitprice")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        soldto, prno, address, trno, pono, qty, drdate, drno, description, "& _ 
                "unit, prodcode, cpr, lnbn, expdate, unitprice"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            tbltempdr"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"where "& _ 
                "drno = @drno"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@drno"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "drno"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tbldrreportDataTable, ByVal drno As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (drno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("drno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(drno,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal drno As String) As DataSet1.tbldrreportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (drno Is Nothing) Then
                Throw New Global.System.ArgumentNullException("drno")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(drno,String)
            End If
            Dim dataTable As DataSet1.tbldrreportDataTable = New DataSet1.tbldrreportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tblchargenewTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tblchargenew"
            tableMapping.ColumnMappings.Add("soldto", "soldto")
            tableMapping.ColumnMappings.Add("prno", "prno")
            tableMapping.ColumnMappings.Add("address", "address")
            tableMapping.ColumnMappings.Add("trno", "trno")
            tableMapping.ColumnMappings.Add("pono", "pono")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("drdate", "drdate")
            tableMapping.ColumnMappings.Add("drno", "drno")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("unit", "unit")
            tableMapping.ColumnMappings.Add("prodcode", "prodcode")
            tableMapping.ColumnMappings.Add("cpr", "cpr")
            tableMapping.ColumnMappings.Add("lnbn", "lnbn")
            tableMapping.ColumnMappings.Add("expdate", "expdate")
            tableMapping.ColumnMappings.Add("unitprice", "unitprice")
            tableMapping.ColumnMappings.Add("prepby", "prepby")
            tableMapping.ColumnMappings.Add("appby", "appby")
            tableMapping.ColumnMappings.Add("cino", "cino")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection
            Me._connection.ConnectionString = Global.desktopframework.My.MySettings.Default.dbmedconn
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        soldto, prno, address, trno, pono, qty, drdate, drno, description, "& _ 
                "unit, prodcode, cpr, lnbn, expdate, unitprice, prepby, appby, cino"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM        "& _ 
                "    tblchargenew"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (cino = @cino)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter
            param.ParameterName = "@cino"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.Size = 45
            param.IsNullable = true
            param.SourceColumn = "cino"
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSet1.tblchargenewDataTable, ByVal cino As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cino Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cino")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cino,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal cino As String) As DataSet1.tblchargenewDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (cino Is Nothing) Then
                Throw New Global.System.ArgumentNullException("cino")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(cino,String)
            End If
            Dim dataTable As DataSet1.tblchargenewDataTable = New DataSet1.tblchargenewDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSet1) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
